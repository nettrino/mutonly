!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	FuzzerTracePC.h	/^    T A, B;$/;"	m	struct:fuzzer::TableOfRecentCompares::Pair
AFL_DEFER_FORKSVR	afl/afl_driver.cpp	/^static volatile char AFL_DEFER_FORKSVR[] = "##SIG_AFL_DEFER_FORKSRV##";$/;"	v	file:
AFL_PERSISTENT	afl/afl_driver.cpp	/^static volatile char AFL_PERSISTENT[] = "##SIG_AFL_PERSISTENT##";$/;"	v	file:
ATTRIBUTE_TARGET_POPCNT	FuzzerDefs.h	33;"	d
ATTRIBUTE_TARGET_POPCNT	FuzzerDefs.h	35;"	d
ActiveThreadCount	FuzzerUtilDarwin.cpp	/^static int ActiveThreadCount = 0;$/;"	m	namespace:fuzzer	file:
AddFeature	FuzzerCorpus.h	/^  bool AddFeature(size_t Idx, uint32_t NewSize, bool Shrink) {$/;"	f	class:fuzzer::InputCorpus
AddInterestingWord	FuzzerTraceState.cpp	/^  void AddInterestingWord(const uint8_t *Data, size_t Size) {$/;"	f	class:fuzzer::TraceState
AddMutation	FuzzerTraceState.cpp	/^  void AddMutation(uint32_t Pos, uint32_t Size, const uint8_t *Data) {$/;"	f	class:fuzzer::TraceState
AddMutation	FuzzerTraceState.cpp	/^  void AddMutation(uint32_t Pos, uint32_t Size, uint64_t Data) {$/;"	f	class:fuzzer::TraceState
AddNewPCID	FuzzerTracePC.h	/^  void AddNewPCID(uintptr_t PCID) {$/;"	f	class:fuzzer::TracePC
AddToCorpus	FuzzerCorpus.h	/^  void AddToCorpus(const Unit &U, size_t NumFeatures, bool MayDeleteFile = false) {$/;"	f	class:fuzzer::InputCorpus
AddValue	FuzzerValueBitMap.h	/^  inline bool AddValue(uintptr_t Value) {$/;"	f	struct:fuzzer::ValueBitMap
AddValueForMemcmp	FuzzerTracePC.cpp	/^void TracePC::AddValueForMemcmp(void *caller_pc, const void *s1, const void *s2,$/;"	f	class:fuzzer::TracePC
AddValueForStrcmp	FuzzerTracePC.cpp	/^void TracePC::AddValueForStrcmp(void *caller_pc, const char *s1, const char *s2,$/;"	f	class:fuzzer::TracePC
AddWordFromDictionary	FuzzerMutate.cpp	/^size_t MutationDispatcher::AddWordFromDictionary(Dictionary &D, uint8_t *Data,$/;"	f	class:fuzzer::MutationDispatcher
AddWordToAutoDictionary	FuzzerMutate.cpp	/^void MutationDispatcher::AddWordToAutoDictionary(DictionaryEntry DE) {$/;"	f	class:fuzzer::MutationDispatcher
AddWordToManualDictionary	FuzzerMutate.cpp	/^void MutationDispatcher::AddWordToManualDictionary(const Word &W) {$/;"	f	class:fuzzer::MutationDispatcher
AflInputBuf	afl/afl_driver.cpp	/^static uint8_t AflInputBuf[kMaxAflInputSize];$/;"	v	file:
AlarmCallback	FuzzerLoop.cpp	/^void Fuzzer::AlarmCallback() {$/;"	f	class:fuzzer::Fuzzer
AlarmHandler	FuzzerUtil.cpp	/^static void AlarmHandler(int, siginfo_t *, void *) {$/;"	f	namespace:fuzzer
AllInputsAreFiles	FuzzerDriver.cpp	/^static bool AllInputsAreFiles() {$/;"	f	namespace:fuzzer
AllocTracer	FuzzerLoop.cpp	/^static MallocFreeTracer AllocTracer;$/;"	m	namespace:fuzzer	file:
AllocateCurrentUnitData	FuzzerLoop.cpp	/^void Fuzzer::AllocateCurrentUnitData() {$/;"	f	class:fuzzer::Fuzzer
AllocatedPointers	test/AccumulateAllocationsTest.cpp	/^int *AllocatedPointers[kAllocatedPointersSize];$/;"	v
ApplyDictionaryEntry	FuzzerMutate.cpp	/^size_t MutationDispatcher::ApplyDictionaryEntry(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
ArtifactPrefix	FuzzerOptions.h	/^  std::string ArtifactPrefix = ".\/";$/;"	m	struct:fuzzer::FuzzingOptions
AutoDictAdds	FuzzerTraceState.cpp	/^  size_t AutoDictAdds = 0;$/;"	m	class:fuzzer::TraceState	file:
AutoDictUnitCounts	FuzzerTraceState.cpp	/^  std::map<Word, size_t> AutoDictUnitCounts;$/;"	m	class:fuzzer::TraceState	file:
B	FuzzerTracePC.h	/^    T A, B;$/;"	m	struct:fuzzer::TableOfRecentCompares::Pair
BLOCK_LENGTH	FuzzerSHA1.cpp	49;"	d	file:
Base64	FuzzerUtil.cpp	/^std::string Base64(const Unit &U) {$/;"	f	namespace:fuzzer
BaseSha1	FuzzerInternal.h	/^  uint8_t BaseSha1[kSHA1NumBytes];  \/\/ Checksum of the base unit.$/;"	m	class:fuzzer::Fuzzer
BlockCoverage	FuzzerInternal.h	/^    size_t BlockCoverage;$/;"	m	struct:fuzzer::Fuzzer::Coverage
Bswap	FuzzerDefs.h	/^inline uint16_t Bswap(uint16_t x) { return __builtin_bswap16(x); }$/;"	f	namespace:fuzzer
Bswap	FuzzerDefs.h	/^inline uint32_t Bswap(uint32_t x) { return __builtin_bswap32(x); }$/;"	f	namespace:fuzzer
Bswap	FuzzerDefs.h	/^inline uint64_t Bswap(uint64_t x) { return __builtin_bswap64(x); }$/;"	f	namespace:fuzzer
Bswap	FuzzerDefs.h	/^inline uint8_t  Bswap(uint8_t x)  { return x; }$/;"	f	namespace:fuzzer
CB	FuzzerInternal.h	/^  UserCallback CB;$/;"	m	class:fuzzer::Fuzzer
CHECK_ERROR	afl/afl_driver.cpp	78;"	d	file:
CHECK_EXTERNAL_FUNCTION	FuzzerLoop.cpp	51;"	d	file:
CallerCalleeCoverage	FuzzerInternal.h	/^    size_t CallerCalleeCoverage;$/;"	m	struct:fuzzer::Fuzzer::Coverage
ChangeBinaryInteger	FuzzerMutate.cpp	/^size_t ChangeBinaryInteger(uint8_t *Data, size_t Size, Random &Rand) {$/;"	f	namespace:fuzzer
CheckExitOnSrcPosOrItem	FuzzerLoop.cpp	/^void Fuzzer::CheckExitOnSrcPosOrItem() {$/;"	f	class:fuzzer::Fuzzer
CheckFnPtr	FuzzerExtFunctionsWeak.cpp	/^static void CheckFnPtr(void *FnPtr, const char *FnName, bool WarnIfMissing) {$/;"	f	file:
ChooseUnitIdxToMutate	FuzzerCorpus.h	/^  size_t ChooseUnitIdxToMutate(Random &Rand) {$/;"	f	class:fuzzer::InputCorpus
ChooseUnitToMutate	FuzzerCorpus.h	/^  InputInfo &ChooseUnitToMutate(Random &Rand) {$/;"	f	class:fuzzer::InputCorpus
ClearAutoDictionary	FuzzerMutate.cpp	/^void MutationDispatcher::ClearAutoDictionary() {$/;"	f	class:fuzzer::MutationDispatcher
CloneArgsWithoutX	FuzzerDriver.cpp	/^static std::string CloneArgsWithoutX(const std::vector<std::string> &Args,$/;"	f	namespace:fuzzer
CloseStdout	FuzzerIO.cpp	/^void CloseStdout() { close(1); }$/;"	f	namespace:fuzzer
CmpDictionaryEntriesDeque	FuzzerMutate.h	/^  DictionaryEntry CmpDictionaryEntriesDeque[kCmpDictionaryEntriesDequeSize];$/;"	m	class:fuzzer::MutationDispatcher
CmpDictionaryEntriesDequeIdx	FuzzerMutate.h	/^  size_t CmpDictionaryEntriesDequeIdx = 0;$/;"	m	class:fuzzer::MutationDispatcher
ComputeSHA1	FuzzerSHA1.cpp	/^void fuzzer::ComputeSHA1(const uint8_t *Data, size_t Len, uint8_t *Out) {$/;"	f	class:fuzzer
ContainsWord	FuzzerDictionary.h	/^  bool ContainsWord(const Word &W) const {$/;"	f	class:fuzzer::Dictionary
CopyFileToErr	FuzzerIO.cpp	/^void CopyFileToErr(const std::string &Path) {$/;"	f	namespace:fuzzer
CopyPartOf	FuzzerMutate.cpp	/^size_t MutationDispatcher::CopyPartOf(const uint8_t *From, size_t FromSize,$/;"	f	class:fuzzer::MutationDispatcher
Corpus	FuzzerInternal.h	/^  InputCorpus &Corpus;$/;"	m	class:fuzzer::Fuzzer
Corpus	FuzzerMutate.h	/^  const InputCorpus *Corpus = nullptr;$/;"	m	class:fuzzer::MutationDispatcher
CorpusDistribution	FuzzerCorpus.h	/^  std::piecewise_constant_distribution<double> CorpusDistribution;$/;"	m	class:fuzzer::InputCorpus
Counter	test/NthRunCrashTest.cpp	/^static int Counter;$/;"	v	file:
CounterBitmap	FuzzerInternal.h	/^    std::vector<uint8_t> CounterBitmap;$/;"	m	struct:fuzzer::Fuzzer::Coverage
CounterBitmapBits	FuzzerInternal.h	/^    size_t CounterBitmapBits;$/;"	m	struct:fuzzer::Fuzzer::Coverage
Counters	FuzzerTracePC.h	/^  alignas(8) uint8_t Counters[kNumCounters];$/;"	m	class:fuzzer::TracePC
CountingFeatures	FuzzerCorpus.h	/^  bool CountingFeatures = false;$/;"	m	class:fuzzer::InputCorpus
Coverage	FuzzerInternal.h	/^    Coverage() { Reset(); }$/;"	f	struct:fuzzer::Fuzzer::Coverage
Coverage	FuzzerInternal.h	/^  struct Coverage {$/;"	s	class:fuzzer::Fuzzer
CrashCallback	FuzzerLoop.cpp	/^void Fuzzer::CrashCallback() {$/;"	f	class:fuzzer::Fuzzer
CrashHandler	FuzzerUtil.cpp	/^static void CrashHandler(int, siginfo_t *, void *) {$/;"	f	namespace:fuzzer
CrossOver	FuzzerCrossOver.cpp	/^size_t MutationDispatcher::CrossOver(const uint8_t *Data1, size_t Size1,$/;"	f	class:fuzzer::MutationDispatcher
CurrentDictionaryEntrySequence	FuzzerMutate.h	/^  std::vector<DictionaryEntry *> CurrentDictionaryEntrySequence;$/;"	m	class:fuzzer::MutationDispatcher
CurrentMutatorSequence	FuzzerMutate.h	/^  std::vector<Mutator> CurrentMutatorSequence;$/;"	m	class:fuzzer::MutationDispatcher
CurrentUnitData	FuzzerInternal.h	/^  uint8_t *CurrentUnitData = nullptr;$/;"	m	class:fuzzer::Fuzzer
CurrentUnitSize	FuzzerInternal.h	/^  std::atomic<size_t> CurrentUnitSize;$/;"	m	class:fuzzer::Fuzzer
DE	FuzzerDictionary.h	/^  DictionaryEntry DE[kMaxDictSize];$/;"	m	class:fuzzer::Dictionary
DSO1	test/DSO1.cpp	/^int DSO1(int a) {$/;"	f
DSO2	test/DSO2.cpp	/^int DSO2(int a) {$/;"	f
DSOTestExtra	test/DSOTestExtra.cpp	/^int DSOTestExtra(int a) {$/;"	f
Data	FuzzerDictionary.h	/^  uint8_t Data[kMaxSize];$/;"	m	class:fuzzer::FixedWord
DeathCallback	FuzzerLoop.cpp	/^void Fuzzer::DeathCallback() {$/;"	f	class:fuzzer::Fuzzer
Default	FuzzerDriver.cpp	/^  int   Default;$/;"	m	struct:fuzzer::FlagDescription	file:
DefaultMutate	FuzzerMutate.cpp	/^size_t MutationDispatcher::DefaultMutate(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
DefaultMutators	FuzzerMutate.h	/^  std::vector<Mutator> DefaultMutators;$/;"	m	class:fuzzer::MutationDispatcher
DeleteFile	FuzzerIO.cpp	/^void DeleteFile(const std::string &Path) {$/;"	f	namespace:fuzzer
DeleteInput	FuzzerCorpus.h	/^  void DeleteInput(size_t Idx) {$/;"	f	class:fuzzer::InputCorpus
DescribePC	FuzzerUtil.cpp	/^std::string DescribePC(const char *SymbolizedFMT, uintptr_t PC) {$/;"	f	namespace:fuzzer
Description	FuzzerDriver.cpp	/^  const char *Description;$/;"	m	struct:fuzzer::FlagDescription	file:
DetectLeaks	FuzzerOptions.h	/^  bool DetectLeaks = true;$/;"	m	struct:fuzzer::FuzzingOptions
Dictionary	FuzzerDictionary.h	/^class Dictionary {$/;"	c	namespace:fuzzer
DictionaryEntry	FuzzerDictionary.h	/^  DictionaryEntry() {}$/;"	f	class:fuzzer::DictionaryEntry
DictionaryEntry	FuzzerDictionary.h	/^  DictionaryEntry(Word W) : W(W) {}$/;"	f	class:fuzzer::DictionaryEntry
DictionaryEntry	FuzzerDictionary.h	/^  DictionaryEntry(Word W, size_t PositionHint) : W(W), PositionHint(PositionHint) {}$/;"	f	class:fuzzer::DictionaryEntry
DictionaryEntry	FuzzerDictionary.h	/^class DictionaryEntry {$/;"	c	namespace:fuzzer
DirPlusFile	FuzzerIO.cpp	/^std::string DirPlusFile(const std::string &DirPath,$/;"	f	namespace:fuzzer
DoCrossOver	FuzzerOptions.h	/^  bool DoCrossOver = true;$/;"	m	struct:fuzzer::FuzzingOptions
DoingMyOwnMemmem	FuzzerTraceState.cpp	/^static bool DoingMyOwnMemmem = false;$/;"	m	namespace:fuzzer	file:
DumpCurrentUnit	FuzzerLoop.cpp	/^void Fuzzer::DumpCurrentUnit(const char *Prefix) {$/;"	f	class:fuzzer::Fuzzer
DupAndCloseStderr	FuzzerIO.cpp	/^void DupAndCloseStderr() {$/;"	f	namespace:fuzzer
EF	FuzzerDriver.cpp	/^ExternalFunctions *EF = nullptr;$/;"	m	namespace:fuzzer	file:
EXT_FUNC	FuzzerExtFunctions.h	25;"	d
EXT_FUNC	FuzzerExtFunctions.h	30;"	d
EXT_FUNC	FuzzerExtFunctionsDlsym.cpp	41;"	d	file:
EXT_FUNC	FuzzerExtFunctionsDlsym.cpp	46;"	d	file:
EXT_FUNC	FuzzerExtFunctionsWeak.cpp	22;"	d	file:
EXT_FUNC	FuzzerExtFunctionsWeak.cpp	27;"	d	file:
EXT_FUNC	FuzzerExtFunctionsWeak.cpp	41;"	d	file:
EXT_FUNC	FuzzerExtFunctionsWeak.cpp	47;"	d	file:
EpochOfLastReadOfOutputCorpus	FuzzerInternal.h	/^  long EpochOfLastReadOfOutputCorpus = 0;$/;"	m	class:fuzzer::Fuzzer
Eq	test/StrcmpTest.cpp	/^bool Eq(const uint8_t *Data, size_t Size, const char *Str) {$/;"	f
ErrorExitCode	FuzzerOptions.h	/^  int ErrorExitCode = 77;$/;"	m	struct:fuzzer::FuzzingOptions
ExactArtifactPath	FuzzerOptions.h	/^  std::string ExactArtifactPath;$/;"	m	struct:fuzzer::FuzzingOptions
ExecuteCallback	FuzzerLoop.cpp	/^void Fuzzer::ExecuteCallback(const uint8_t *Data, size_t Size) {$/;"	f	class:fuzzer::Fuzzer
ExecuteCommand	FuzzerUtilDarwin.cpp	/^int ExecuteCommand(const std::string &Command) {$/;"	f	namespace:fuzzer
ExecuteCommand	FuzzerUtilLinux.cpp	/^int ExecuteCommand(const std::string &Command) {$/;"	f	namespace:fuzzer
ExecuteCommandAndReadOutput	FuzzerUtil.cpp	/^bool ExecuteCommandAndReadOutput(const std::string &Command, std::string *Out) {$/;"	f	namespace:fuzzer
ExitOnItem	FuzzerOptions.h	/^  std::string ExitOnItem;$/;"	m	struct:fuzzer::FuzzingOptions
ExitOnSrcPos	FuzzerOptions.h	/^  std::string ExitOnSrcPos;$/;"	m	struct:fuzzer::FuzzingOptions
ExternalFunctions	FuzzerExtFunctions.h	/^struct ExternalFunctions {$/;"	s	namespace:fuzzer
ExternalFunctions	FuzzerExtFunctionsDlsym.cpp	/^ExternalFunctions::ExternalFunctions() {$/;"	f	class:fuzzer::ExternalFunctions
ExternalFunctions	FuzzerExtFunctionsWeak.cpp	/^ExternalFunctions::ExternalFunctions() {$/;"	f	class:fuzzer::ExternalFunctions
F	FuzzerLoop.cpp	/^static Fuzzer *F;$/;"	m	namespace:fuzzer	file:
F	FuzzerTraceState.cpp	/^  const Fuzzer *F;$/;"	m	class:fuzzer::TraceState	file:
F	test/CallerCalleeTest.cpp	/^typedef void (*F)();$/;"	t	file:
FUZZER_DEPRECATED_FLAG	FuzzerDriver.cpp	44;"	d	file:
FUZZER_DEPRECATED_FLAG	FuzzerDriver.cpp	49;"	d	file:
FUZZER_DEPRECATED_FLAG	FuzzerDriver.cpp	56;"	d	file:
FUZZER_DEPRECATED_FLAG	FuzzerDriver.cpp	66;"	d	file:
FUZZER_FLAG_INT	FuzzerDriver.cpp	45;"	d	file:
FUZZER_FLAG_INT	FuzzerDriver.cpp	50;"	d	file:
FUZZER_FLAG_INT	FuzzerDriver.cpp	58;"	d	file:
FUZZER_FLAG_INT	FuzzerDriver.cpp	67;"	d	file:
FUZZER_FLAG_STRING	FuzzerDriver.cpp	47;"	d	file:
FUZZER_FLAG_STRING	FuzzerDriver.cpp	52;"	d	file:
FUZZER_FLAG_STRING	FuzzerDriver.cpp	63;"	d	file:
FUZZER_FLAG_STRING	FuzzerDriver.cpp	69;"	d	file:
FUZZER_FLAG_UNSIGNED	FuzzerDriver.cpp	46;"	d	file:
FUZZER_FLAG_UNSIGNED	FuzzerDriver.cpp	51;"	d	file:
FUZZER_FLAG_UNSIGNED	FuzzerDriver.cpp	60;"	d	file:
FUZZER_FLAG_UNSIGNED	FuzzerDriver.cpp	68;"	d	file:
FeatureDebug	FuzzerCorpus.h	/^  static const bool FeatureDebug = false;$/;"	m	class:fuzzer::InputCorpus
FileToString	FuzzerIO.cpp	/^std::string FileToString(const std::string &Path) {$/;"	f	namespace:fuzzer
FileToVector	FuzzerIO.cpp	/^Unit FileToVector(const std::string &Path, size_t MaxSize, bool ExitOnError) {$/;"	f	namespace:fuzzer
FinalizeTrace	FuzzerTracePC.cpp	/^size_t TracePC::FinalizeTrace(InputCorpus *C, size_t InputSize, bool Shrink) {$/;"	f	class:fuzzer::TracePC
FindExtraUnits	FuzzerLoop.cpp	/^UnitVector Fuzzer::FindExtraUnits(const UnitVector &Initial,$/;"	f	class:fuzzer::Fuzzer
FixedWord	FuzzerDictionary.h	/^  FixedWord() {}$/;"	f	class:fuzzer::FixedWord
FixedWord	FuzzerDictionary.h	/^  FixedWord(const uint8_t *B, uint8_t S) { Set(B, S); }$/;"	f	class:fuzzer::FixedWord
FixedWord	FuzzerDictionary.h	/^template <size_t kMaxSize> class FixedWord {$/;"	c	namespace:fuzzer
FlagDescription	FuzzerDriver.cpp	/^struct FlagDescription {$/;"	s	namespace:fuzzer	file:
FlagValue	FuzzerDriver.cpp	/^static const char *FlagValue(const char *Param, const char *Name) {$/;"	f	namespace:fuzzer
Flags	FuzzerDriver.cpp	/^} Flags;$/;"	m	namespace:fuzzer	typeref:struct:fuzzer::__anon1	file:
Fn	FuzzerMutate.h	/^    size_t (MutationDispatcher::*Fn)(uint8_t *Data, size_t Size, size_t Max);$/;"	m	struct:fuzzer::MutationDispatcher::Mutator
ForEach	FuzzerValueBitMap.h	/^  void ForEach(Callback CB) {$/;"	f	struct:fuzzer::ValueBitMap
FreeHook	FuzzerLoop.cpp	/^void FreeHook(const volatile void *ptr) {$/;"	f	namespace:fuzzer
Frees	FuzzerLoop.cpp	/^  std::atomic<size_t> Frees;$/;"	m	struct:fuzzer::MallocFreeTracer	file:
Fuzzer	FuzzerInternal.h	/^class Fuzzer {$/;"	c	namespace:fuzzer
Fuzzer	FuzzerLoop.cpp	/^Fuzzer::Fuzzer(UserCallback CB, InputCorpus &Corpus, MutationDispatcher &MD,$/;"	f	class:fuzzer::Fuzzer
FuzzerDriver	FuzzerDriver.cpp	/^int FuzzerDriver(int *argc, char ***argv, UserCallback Callback) {$/;"	f	namespace:fuzzer
FuzzingOptions	FuzzerOptions.h	/^struct FuzzingOptions {$/;"	s	namespace:fuzzer
Get	FuzzerTracePC.h	/^  Pair Get(size_t I) { return Table[I % kSize]; }$/;"	f	struct:fuzzer::TableOfRecentCompares
Get	FuzzerValueBitMap.h	/^  inline bool Get(uintptr_t Idx) {$/;"	f	struct:fuzzer::ValueBitMap
GetCurrentUnitInFuzzingThead	FuzzerLoop.cpp	/^size_t Fuzzer::GetCurrentUnitInFuzzingThead(const uint8_t **Data) const {$/;"	f	class:fuzzer::Fuzzer
GetEpoch	FuzzerIO.cpp	/^long GetEpoch(const std::string &Path) {$/;"	f	namespace:fuzzer
GetFeature	FuzzerCorpus.h	/^  size_t GetFeature(size_t Idx) const { return InputSizesPerFeature[Idx]; }$/;"	f	class:fuzzer::InputCorpus
GetFnPtr	FuzzerExtFunctionsDlsym.cpp	/^static T GetFnPtr(const char *FnName, bool WarnIfMissing) {$/;"	f	file:
GetMD	FuzzerInternal.h	/^  MutationDispatcher &GetMD() { return MD; }$/;"	f	class:fuzzer::Fuzzer
GetMaxSize	FuzzerDictionary.h	/^  static size_t GetMaxSize() { return kMaxSize; }$/;"	f	class:fuzzer::FixedWord
GetNewPCIDs	FuzzerTracePC.h	/^  size_t GetNewPCIDs(uintptr_t **NewPCIDsPtr) {$/;"	f	class:fuzzer::TracePC
GetNumBitsSinceLastMerge	FuzzerValueBitMap.h	/^  size_t GetNumBitsSinceLastMerge() const { return NumBits; }$/;"	f	struct:fuzzer::ValueBitMap
GetPCbyPCID	FuzzerTracePC.h	/^  uintptr_t GetPCbyPCID(uintptr_t PCID) { return PCs[PCID]; }$/;"	f	class:fuzzer::TracePC
GetPeakRSSMb	FuzzerUtil.cpp	/^size_t GetPeakRSSMb() {$/;"	f	namespace:fuzzer
GetPeakRSSMb	afl/afl_driver.cpp	/^size_t GetPeakRSSMb() {$/;"	f
GetPid	FuzzerUtil.cpp	/^int GetPid() { return getpid(); }$/;"	f	namespace:fuzzer
GetPositionHint	FuzzerDictionary.h	/^  size_t GetPositionHint() const {$/;"	f	class:fuzzer::DictionaryEntry
GetRand	FuzzerMutate.h	/^  Random &GetRand() { return Rand; }$/;"	f	class:fuzzer::MutationDispatcher
GetSuccessCount	FuzzerDictionary.h	/^  size_t GetSuccessCount() const {return SuccessCount; }$/;"	f	class:fuzzer::DictionaryEntry
GetTotalPCCoverage	FuzzerTracePC.h	/^  size_t GetTotalPCCoverage() { return TotalPCCoverage; }$/;"	f	class:fuzzer::TracePC
GetUseCount	FuzzerDictionary.h	/^  size_t GetUseCount() const { return UseCount; }$/;"	f	class:fuzzer::DictionaryEntry
GetW	FuzzerDictionary.h	/^  const Word &GetW() const { return W; }$/;"	f	class:fuzzer::DictionaryEntry
Get_mt19937	FuzzerRandom.h	/^  std::mt19937 &Get_mt19937() { return R; }$/;"	f	class:fuzzer::Random
HASH_LENGTH	FuzzerSHA1.cpp	48;"	d	file:
HandleCallerCallee	FuzzerTracePC.cpp	/^void TracePC::HandleCallerCallee(uintptr_t Caller, uintptr_t Callee) {$/;"	f	class:fuzzer::TracePC
HandleCmp	FuzzerTracePC.cpp	/^void TracePC::HandleCmp(void *PC, T Arg1, T Arg2) {$/;"	f	class:fuzzer::TracePC
HandleInit	FuzzerTracePC.cpp	/^void TracePC::HandleInit(uint32_t *Start, uint32_t *Stop) {$/;"	f	class:fuzzer::TracePC
HandleTrace	FuzzerTracePC.cpp	/^void TracePC::HandleTrace(uint32_t *Guard, uintptr_t PC) {$/;"	f	class:fuzzer::TracePC
HandleValueProfile	FuzzerTracePC.h	/^  void HandleValueProfile(size_t Value) { ValueProfileMap.AddValue(Value); }$/;"	f	class:fuzzer::TracePC
HasMoreMallocsThanFrees	FuzzerInternal.h	/^  bool HasMoreMallocsThanFrees = false;$/;"	m	class:fuzzer::Fuzzer
HasPositionHint	FuzzerDictionary.h	/^  bool HasPositionHint() const { return PositionHint != std::numeric_limits<size_t>::max(); }$/;"	f	class:fuzzer::DictionaryEntry
HasUnit	FuzzerCorpus.h	/^  bool HasUnit(const Unit &U) { return Hashes.count(Hash(U)); }$/;"	f	class:fuzzer::InputCorpus
HasUnit	FuzzerCorpus.h	/^  bool HasUnit(const std::string &H) { return Hashes.count(H); }$/;"	f	class:fuzzer::InputCorpus
Hash	FuzzerUtil.cpp	/^std::string Hash(const Unit &U) {$/;"	f	namespace:fuzzer
Hashes	FuzzerCorpus.h	/^  std::unordered_set<std::string> Hashes;$/;"	m	class:fuzzer::InputCorpus
InFuzzingThread	FuzzerInternal.h	/^  bool InFuzzingThread() const { return IsMyThread; }$/;"	f	class:fuzzer::Fuzzer
InMergeMode	FuzzerInternal.h	/^  bool InMergeMode = false;$/;"	m	class:fuzzer::Fuzzer
IncSuccessCount	FuzzerDictionary.h	/^  void IncSuccessCount() { SuccessCount++; }$/;"	f	class:fuzzer::DictionaryEntry
IncUseCount	FuzzerDictionary.h	/^  void IncUseCount() { UseCount++; }$/;"	f	class:fuzzer::DictionaryEntry
InitializeTraceState	FuzzerTraceState.cpp	/^void Fuzzer::InitializeTraceState() {$/;"	f	class:fuzzer::Fuzzer
InputCorpus	FuzzerCorpus.h	/^  InputCorpus(const std::string &OutputCorpus) : OutputCorpus(OutputCorpus) {$/;"	f	class:fuzzer::InputCorpus
InputCorpus	FuzzerCorpus.h	/^class InputCorpus {$/;"	c	namespace:fuzzer
InputInfo	FuzzerCorpus.h	/^struct InputInfo {$/;"	s	namespace:fuzzer
InputSizesPerFeature	FuzzerCorpus.h	/^  uint32_t InputSizesPerFeature[kFeatureSetSize];$/;"	m	class:fuzzer::InputCorpus
Inputs	FuzzerCorpus.h	/^  std::vector<InputInfo*> Inputs;$/;"	m	class:fuzzer::InputCorpus
Inputs	FuzzerDriver.cpp	/^static std::vector<std::string> *Inputs;$/;"	m	namespace:fuzzer	file:
Insert	FuzzerTracePC.h	/^  void Insert(size_t Idx, T Arg1, T Arg2) {$/;"	f	struct:fuzzer::TableOfRecentCompares
InsertPartOf	FuzzerMutate.cpp	/^size_t MutationDispatcher::InsertPartOf(const uint8_t *From, size_t FromSize,$/;"	f	class:fuzzer::MutationDispatcher
IntFlag	FuzzerDriver.cpp	/^  int   *IntFlag;$/;"	m	struct:fuzzer::FlagDescription	file:
InterestingWords	FuzzerTraceState.cpp	/^  std::set<Word> InterestingWords;$/;"	m	class:fuzzer::TraceState	file:
InternalStrnlen	FuzzerTraceState.cpp	/^static size_t InternalStrnlen(const char *S, size_t MaxLen) {$/;"	f	namespace:fuzzer
InterruptCallback	FuzzerLoop.cpp	/^void Fuzzer::InterruptCallback() {$/;"	f	class:fuzzer::Fuzzer
InterruptHandler	FuzzerUtil.cpp	/^static void InterruptHandler(int, siginfo_t *, void *) {$/;"	f	namespace:fuzzer
Intervals	FuzzerCorpus.h	/^  std::vector<double> Intervals;$/;"	m	class:fuzzer::InputCorpus
IsASCII	FuzzerUtil.cpp	/^bool IsASCII(const Unit &U) { return IsASCII(U.data(), U.size()); }$/;"	f	namespace:fuzzer
IsASCII	FuzzerUtil.cpp	/^bool IsASCII(const uint8_t *Data, size_t Size) {$/;"	f	namespace:fuzzer
IsFile	FuzzerIO.cpp	/^bool IsFile(const std::string &Path) {$/;"	f	namespace:fuzzer
IsInterestingCoverageFile	FuzzerTracePC.cpp	/^static bool IsInterestingCoverageFile(std::string &File) {$/;"	f	namespace:fuzzer
IsMyThread	FuzzerInternal.h	/^  static thread_local bool IsMyThread;$/;"	m	class:fuzzer::Fuzzer
IsMyThread	FuzzerLoop.cpp	/^thread_local bool Fuzzer::IsMyThread;$/;"	m	class:fuzzer::Fuzzer	file:
IsTwoByteData	FuzzerTraceState.cpp	/^  bool IsTwoByteData(uint64_t Data) {$/;"	f	class:fuzzer::TraceState	file:
LIBFUZZER_APPLE	FuzzerDefs.h	24;"	d
LIBFUZZER_APPLE	FuzzerDefs.h	27;"	d
LIBFUZZER_APPLE	afl/afl_driver.cpp	65;"	d	file:
LIBFUZZER_APPLE	afl/afl_driver.cpp	68;"	d	file:
LIBFUZZER_LINUX	FuzzerDefs.h	23;"	d
LIBFUZZER_LINUX	FuzzerDefs.h	26;"	d
LIBFUZZER_LINUX	afl/afl_driver.cpp	64;"	d	file:
LIBFUZZER_LINUX	afl/afl_driver.cpp	67;"	d	file:
LLVMFuzzerCustomCrossOver	test/CustomCrossOverTest.cpp	/^extern "C" size_t LLVMFuzzerCustomCrossOver(const uint8_t *Data1, size_t Size1,$/;"	f
LLVMFuzzerCustomMutator	test/CustomMutatorTest.cpp	/^extern "C" size_t LLVMFuzzerCustomMutator(uint8_t *Data, size_t Size,$/;"	f
LLVMFuzzerInitialize	test/AFLDriverTest.cpp	/^extern "C" int LLVMFuzzerInitialize(int *argc, char ***argv) {$/;"	f
LLVMFuzzerInitialize	test/InitializeTest.cpp	/^extern "C" int LLVMFuzzerInitialize(int *argc, char ***argv) {$/;"	f
LLVMFuzzerMutate	FuzzerLoop.cpp	/^size_t LLVMFuzzerMutate(uint8_t *Data, size_t Size, size_t MaxSize) {$/;"	f
LLVMFuzzerTestOneInput	test/AFLDriverTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/AbsNegAndConstant64Test.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/AbsNegAndConstantTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/AccumulateAllocationsTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/BufferOverflowOnInput.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/CallerCalleeTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/CounterTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/CustomCrossOverTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/CustomMutatorTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/DSOTestMain.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/DivTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/EmptyTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/FourIndependentBranchesTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/FullCoverageSetTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/FuzzerUnittest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/InitializeTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/LeakTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/LeakTimeoutTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/LoadTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/MemcmpTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/NthRunCrashTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/NullDerefOnEmptyTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/NullDerefTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/OneHugeAllocTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/OutOfMemoryTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/RepeatedBytesTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/RepeatedMemcmp.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/ShrinkControlFlowTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/ShrinkValueProfileTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/SignedIntOverflowTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/SimpleCmpTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/SimpleDictionaryTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/SimpleFnAdapterTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/SimpleHashTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/SimpleTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/SimpleThreadedTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/SingleMemcmpTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/SingleStrcmpTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/SingleStrncmpTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/SpamyTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/StrcmpTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/StrncmpOOBTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/StrncmpTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/StrstrTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/SwapCmpTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/Switch2Test.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/SwitchTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/ThreadedLeakTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/ThreadedTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/TimeoutTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/TraceMallocTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVMFuzzerTestOneInput	test/UninstrumentedTest.cpp	/^extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {$/;"	f
LLVM_FUZZER_ADAPTER_H	FuzzerFnAdapter.h	16;"	d
LLVM_FUZZER_CORPUS	FuzzerCorpus.h	13;"	d
LLVM_FUZZER_DEFINES_SANITIZER_WEAK_HOOOKS	FuzzerTraceState.cpp	261;"	d	file:
LLVM_FUZZER_DEFS_H	FuzzerDefs.h	12;"	d
LLVM_FUZZER_DICTIONARY_H	FuzzerDictionary.h	13;"	d
LLVM_FUZZER_EXT_FUNCTIONS_H	FuzzerExtFunctions.h	12;"	d
LLVM_FUZZER_INTERFACE_H	FuzzerInterface.h	20;"	d
LLVM_FUZZER_INTERNAL_H	FuzzerInternal.h	13;"	d
LLVM_FUZZER_MUTATE_H	FuzzerMutate.h	13;"	d
LLVM_FUZZER_OPTIONS_H	FuzzerOptions.h	13;"	d
LLVM_FUZZER_RANDOM_H	FuzzerRandom.h	13;"	d
LLVM_FUZZER_TRACE_PC	FuzzerTracePC.h	13;"	d
LLVM_FUZZER_VALUE_BIT_MAP_H	FuzzerValueBitMap.h	13;"	d
Large	test/SignedIntOverflowTest.cpp	/^static int Large = INT_MAX;$/;"	v	file:
ListFilesInDirRecursive	FuzzerIO.cpp	/^static void ListFilesInDirRecursive(const std::string &Dir, long *Epoch,$/;"	f	namespace:fuzzer
Loop	FuzzerLoop.cpp	/^void Fuzzer::Loop() {$/;"	f	class:fuzzer::Fuzzer
MD	FuzzerInternal.h	/^  MutationDispatcher &MD;$/;"	m	class:fuzzer::Fuzzer
MD	FuzzerTraceState.cpp	/^  MutationDispatcher &MD;$/;"	m	class:fuzzer::TraceState	file:
MakeDictionaryEntryFromCMP	FuzzerMutate.cpp	/^DictionaryEntry MutationDispatcher::MakeDictionaryEntryFromCMP($/;"	f	class:fuzzer::MutationDispatcher
MallocFreeTracer	FuzzerLoop.cpp	/^struct MallocFreeTracer {$/;"	s	namespace:fuzzer	file:
MallocHook	FuzzerLoop.cpp	/^void MallocHook(const volatile void *ptr, size_t size) {$/;"	f	namespace:fuzzer
Mallocs	FuzzerLoop.cpp	/^  std::atomic<size_t> Mallocs;$/;"	m	struct:fuzzer::MallocFreeTracer	file:
ManualDictionary	FuzzerMutate.h	/^  Dictionary ManualDictionary;$/;"	m	class:fuzzer::MutationDispatcher
Map	FuzzerValueBitMap.h	/^  uintptr_t Map[kMapSizeInWords] __attribute__((aligned(512)));$/;"	m	struct:fuzzer::ValueBitMap
Max	FuzzerDefs.h	/^template <class T> T Max(T a, T b) { return a > b ? a : b; }$/;"	f	namespace:fuzzer
MaxCoverage	FuzzerInternal.h	/^  Coverage MaxCoverage;$/;"	m	class:fuzzer::Fuzzer
MaxInputLen	FuzzerInternal.h	/^  size_t MaxInputLen = 0;$/;"	m	class:fuzzer::Fuzzer
MaxLen	FuzzerOptions.h	/^  size_t MaxLen = 0;$/;"	m	struct:fuzzer::FuzzingOptions
MaxMutationLen	FuzzerInternal.h	/^  size_t MaxMutationLen = 0;$/;"	m	class:fuzzer::Fuzzer
MaxNumberOfRuns	FuzzerOptions.h	/^  size_t MaxNumberOfRuns = -1L;$/;"	m	struct:fuzzer::FuzzingOptions
MaxTotalTimeSec	FuzzerOptions.h	/^  int MaxTotalTimeSec = 0;$/;"	m	struct:fuzzer::FuzzingOptions
MayDeleteFile	FuzzerCorpus.h	/^  bool MayDeleteFile = false;$/;"	m	struct:fuzzer::InputInfo
Merge	FuzzerLoop.cpp	/^void Fuzzer::Merge(const std::vector<std::string> &Corpora) {$/;"	f	class:fuzzer::Fuzzer
MergeFrom	FuzzerValueBitMap.h	/^  bool MergeFrom(ValueBitMap &Other) {$/;"	f	struct:fuzzer::ValueBitMap
Min	FuzzerDefs.h	/^template <class T> T Min(T a, T b) { return a < b ? a : b; }$/;"	f	namespace:fuzzer
MinimizeCrashInput	FuzzerDriver.cpp	/^int MinimizeCrashInput(const std::vector<std::string> &Args) {$/;"	f	namespace:fuzzer
MinimizeCrashInputInternalStep	FuzzerDriver.cpp	/^int MinimizeCrashInputInternalStep(Fuzzer *F, InputCorpus *Corpus) {$/;"	f	namespace:fuzzer
MinimizeCrashLoop	FuzzerLoop.cpp	/^void Fuzzer::MinimizeCrashLoop(const Unit &U) {$/;"	f	class:fuzzer::Fuzzer
MissingExternalApiFunction	FuzzerLoop.cpp	/^static void MissingExternalApiFunction(const char *FnName) {$/;"	f	namespace:fuzzer
Module	FuzzerTracePC.h	/^  struct Module {$/;"	s	class:fuzzer::TracePC
Modules	FuzzerTracePC.h	/^  Module Modules[4096];$/;"	m	class:fuzzer::TracePC
Mu	FuzzerDriver.cpp	/^static std::mutex Mu;$/;"	m	namespace:fuzzer	file:
MutOnly	FuzzerOptions.h	/^  bool MutOnly = false;$/;"	m	struct:fuzzer::FuzzingOptions
Mutate	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate(uint8_t *Data, size_t Size, size_t MaxSize) {$/;"	f	class:fuzzer::MutationDispatcher
MutateAndTestOne	FuzzerLoop.cpp	/^void Fuzzer::MutateAndTestOne() {$/;"	f	class:fuzzer::Fuzzer
MutateDepth	FuzzerOptions.h	/^  int MutateDepth = 5;$/;"	m	struct:fuzzer::FuzzingOptions
MutateImpl	FuzzerMutate.cpp	/^size_t MutationDispatcher::MutateImpl(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
MutateInPlaceHere	FuzzerMutate.h	/^  std::vector<uint8_t> MutateInPlaceHere;$/;"	m	class:fuzzer::MutationDispatcher
Mutate_AddWordFromManualDictionary	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_AddWordFromManualDictionary(uint8_t *Data,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_AddWordFromPersistentAutoDictionary	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_AddWordFromPersistentAutoDictionary($/;"	f	class:fuzzer::MutationDispatcher
Mutate_AddWordFromTORC	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_AddWordFromTORC($/;"	f	class:fuzzer::MutationDispatcher
Mutate_AddWordFromTemporaryAutoDictionary	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_AddWordFromTemporaryAutoDictionary($/;"	f	class:fuzzer::MutationDispatcher
Mutate_ChangeASCIIInteger	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_ChangeASCIIInteger(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_ChangeBinaryInteger	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_ChangeBinaryInteger(uint8_t *Data,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_ChangeBit	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_ChangeBit(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_ChangeByte	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_ChangeByte(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_CopyPart	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_CopyPart(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_CrossOver	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_CrossOver(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_Custom	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_Custom(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_CustomCrossOver	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_CustomCrossOver(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_EraseBytes	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_EraseBytes(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_InsertByte	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_InsertByte(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_InsertRepeatedBytes	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_InsertRepeatedBytes(uint8_t *Data,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_ShuffleBytes	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_ShuffleBytes(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
MutationDispatcher	FuzzerMutate.cpp	/^MutationDispatcher::MutationDispatcher(Random &Rand,$/;"	f	class:fuzzer::MutationDispatcher
MutationDispatcher	FuzzerMutate.h	/^class MutationDispatcher {$/;"	c	namespace:fuzzer
Mutations	FuzzerTraceState.cpp	/^  TraceBasedMutation Mutations[kMaxMutations];$/;"	m	class:fuzzer::TraceState	file:
Mutator	FuzzerMutate.h	/^  struct Mutator {$/;"	s	class:fuzzer::MutationDispatcher
Mutator	test/FuzzerUnittest.cpp	/^typedef size_t (MutationDispatcher::*Mutator)(uint8_t *Data, size_t Size,$/;"	t	file:
Mutators	FuzzerMutate.h	/^  std::vector<Mutator> Mutators;$/;"	m	class:fuzzer::MutationDispatcher
MyStol	FuzzerDriver.cpp	/^static long MyStol(const char *Str) {$/;"	f	namespace:fuzzer
NO_SANITIZE_MEMORY	FuzzerLoop.cpp	31;"	d	file:
NO_SANITIZE_MEMORY	FuzzerLoop.cpp	34;"	d	file:
NO_SANITIZE_MEMORY	FuzzerLoop.cpp	35;"	d	file:
Name	FuzzerDriver.cpp	/^  const char *Name;$/;"	m	struct:fuzzer::FlagDescription	file:
Name	FuzzerMutate.h	/^    const char *Name;$/;"	m	struct:fuzzer::MutationDispatcher::Mutator
NewPCIDs	FuzzerTracePC.h	/^  uintptr_t NewPCIDs[kMaxNewPCIDs];$/;"	m	class:fuzzer::TracePC
Null	test/NullDerefOnEmptyTest.cpp	/^static volatile int *Null = 0;$/;"	v	file:
Null	test/NullDerefTest.cpp	/^static volatile int *Null = 0;$/;"	v	file:
NumActiveUnits	FuzzerCorpus.h	/^  size_t NumActiveUnits() const {$/;"	f	class:fuzzer::InputCorpus
NumAllocatedPointers	test/AccumulateAllocationsTest.cpp	/^int NumAllocatedPointers = 0;$/;"	v
NumBits	FuzzerValueBitMap.h	/^  size_t NumBits = 0;$/;"	m	struct:fuzzer::ValueBitMap
NumExecutedMutations	FuzzerCorpus.h	/^  size_t NumExecutedMutations = 0;$/;"	m	struct:fuzzer::InputInfo
NumFeatures	FuzzerCorpus.h	/^  size_t NumFeatures = 0;$/;"	m	struct:fuzzer::InputInfo
NumFeatures	FuzzerCorpus.h	/^  size_t NumFeatures() const {$/;"	f	class:fuzzer::InputCorpus
NumGuards	FuzzerTracePC.h	/^  size_t NumGuards = 0;$/;"	m	class:fuzzer::TracePC
NumModules	FuzzerTracePC.h	/^  size_t NumModules = 0;$/;"	m	class:fuzzer::TracePC
NumMutations	FuzzerTraceState.cpp	/^  size_t NumMutations;$/;"	m	class:fuzzer::TraceState	file:
NumNewPCIDs	FuzzerTracePC.h	/^  size_t NumNewPCIDs = 0;$/;"	m	class:fuzzer::TracePC
NumSuccessfullMutations	FuzzerCorpus.h	/^  size_t NumSuccessfullMutations = 0;$/;"	m	struct:fuzzer::InputInfo
NumberOfCpuCores	FuzzerUtil.cpp	/^int NumberOfCpuCores() {$/;"	f	namespace:fuzzer
NumberOfLeakDetectionAttempts	FuzzerInternal.h	/^  size_t NumberOfLeakDetectionAttempts = 0;$/;"	m	class:fuzzer::Fuzzer
NumberOfNewUnitsAdded	FuzzerInternal.h	/^  size_t NumberOfNewUnitsAdded = 0;$/;"	m	class:fuzzer::Fuzzer
OldBlockedSignalsSet	FuzzerUtilDarwin.cpp	/^static sigset_t OldBlockedSignalsSet;$/;"	m	namespace:fuzzer	file:
OldSigIntAction	FuzzerUtilDarwin.cpp	/^static struct sigaction OldSigIntAction;$/;"	m	namespace:fuzzer	typeref:struct:fuzzer::sigaction	file:
OldSigQuitAction	FuzzerUtilDarwin.cpp	/^static struct sigaction OldSigQuitAction;$/;"	m	namespace:fuzzer	typeref:struct:fuzzer::sigaction	file:
OnlyASCII	FuzzerOptions.h	/^  bool OnlyASCII = false;$/;"	m	struct:fuzzer::FuzzingOptions
Options	FuzzerInternal.h	/^  FuzzingOptions Options;$/;"	m	class:fuzzer::Fuzzer
Options	FuzzerMutate.h	/^  const FuzzingOptions &Options;$/;"	m	class:fuzzer::MutationDispatcher
Options	FuzzerTraceState.cpp	/^  const FuzzingOptions Options;$/;"	m	class:fuzzer::TraceState	file:
OutputCSV	FuzzerOptions.h	/^  bool OutputCSV = false;$/;"	m	struct:fuzzer::FuzzingOptions
OutputCorpus	FuzzerCorpus.h	/^  std::string OutputCorpus;$/;"	m	class:fuzzer::InputCorpus
OutputCorpus	FuzzerOptions.h	/^  std::string OutputCorpus;$/;"	m	struct:fuzzer::FuzzingOptions
OutputFile	FuzzerIO.cpp	/^static FILE *OutputFile = stderr;$/;"	m	namespace:fuzzer	file:
PCs	FuzzerTracePC.h	/^  uintptr_t PCs[kNumPCs];$/;"	m	class:fuzzer::TracePC
Pair	FuzzerTracePC.h	/^  struct Pair {$/;"	s	struct:fuzzer::TableOfRecentCompares
ParseDictionaryFile	FuzzerUtil.cpp	/^bool ParseDictionaryFile(const std::string &Text, std::vector<Unit> *Units) {$/;"	f	namespace:fuzzer
ParseFlags	FuzzerDriver.cpp	/^static void ParseFlags(const std::vector<std::string> &Args) {$/;"	f	namespace:fuzzer
ParseOneDictionaryEntry	FuzzerUtil.cpp	/^bool ParseOneDictionaryEntry(const std::string &Str, Unit *U) {$/;"	f	namespace:fuzzer
ParseOneFlag	FuzzerDriver.cpp	/^static bool ParseOneFlag(const char *Param) {$/;"	f	namespace:fuzzer
PersistentAutoDictionary	FuzzerMutate.h	/^  Dictionary PersistentAutoDictionary;$/;"	m	class:fuzzer::MutationDispatcher
Pos	FuzzerTraceState.cpp	/^  uint32_t Pos;$/;"	m	struct:fuzzer::TraceBasedMutation	file:
PositionHint	FuzzerDictionary.h	/^  size_t PositionHint = std::numeric_limits<size_t>::max();$/;"	m	class:fuzzer::DictionaryEntry
PreferSmall	FuzzerOptions.h	/^  bool PreferSmall = true;$/;"	m	struct:fuzzer::FuzzingOptions
PrepareCounters	FuzzerLoop.cpp	/^void Fuzzer::PrepareCounters(Fuzzer::Coverage *C) {$/;"	f	class:fuzzer::Fuzzer
Print	FuzzerDictionary.h	/^  void Print(const char *PrintAfter = "\\n") {$/;"	f	class:fuzzer::DictionaryEntry
Print	FuzzerUtil.cpp	/^void Print(const Unit &v, const char *PrintAfter) {$/;"	f	namespace:fuzzer
PrintASCII	FuzzerMutate.cpp	/^static void PrintASCII(const Word &W, const char *PrintAfter) {$/;"	f	namespace:fuzzer
PrintASCII	FuzzerUtil.cpp	/^void PrintASCII(const Unit &U, const char *PrintAfter) {$/;"	f	namespace:fuzzer
PrintASCII	FuzzerUtil.cpp	/^void PrintASCII(const uint8_t *Data, size_t Size, const char *PrintAfter) {$/;"	f	namespace:fuzzer
PrintASCIIByte	FuzzerUtil.cpp	/^void PrintASCIIByte(uint8_t Byte) {$/;"	f	namespace:fuzzer
PrintCorpusStats	FuzzerOptions.h	/^  bool PrintCorpusStats = false;$/;"	m	struct:fuzzer::FuzzingOptions
PrintCoverage	FuzzerOptions.h	/^  bool PrintCoverage = false;$/;"	m	struct:fuzzer::FuzzingOptions
PrintCoverage	FuzzerTracePC.cpp	/^void TracePC::PrintCoverage() {$/;"	f	class:fuzzer::TracePC
PrintFeatureSet	FuzzerCorpus.h	/^  void PrintFeatureSet() {$/;"	f	class:fuzzer::InputCorpus
PrintFinalStats	FuzzerLoop.cpp	/^void Fuzzer::PrintFinalStats() {$/;"	f	class:fuzzer::Fuzzer
PrintFinalStats	FuzzerOptions.h	/^  bool PrintFinalStats = false;$/;"	m	struct:fuzzer::FuzzingOptions
PrintHelp	FuzzerDriver.cpp	/^static void PrintHelp() {$/;"	f	namespace:fuzzer
PrintHexArray	FuzzerUtil.cpp	/^void PrintHexArray(const uint8_t *Data, size_t Size,$/;"	f	namespace:fuzzer
PrintModuleInfo	FuzzerTracePC.cpp	/^void TracePC::PrintModuleInfo() {$/;"	f	class:fuzzer::TracePC
PrintMutationSequence	FuzzerMutate.cpp	/^void MutationDispatcher::PrintMutationSequence() {$/;"	f	class:fuzzer::MutationDispatcher
PrintNEW	FuzzerOptions.h	/^  bool PrintNEW = true; \/\/ Print a status line when new units are found;$/;"	m	struct:fuzzer::FuzzingOptions
PrintNewCovPcs	FuzzerOptions.h	/^  bool PrintNewCovPcs = false;$/;"	m	struct:fuzzer::FuzzingOptions
PrintNewPCs	FuzzerLoop.cpp	/^void Fuzzer::PrintNewPCs() {$/;"	f	class:fuzzer::Fuzzer
PrintOneNewPC	FuzzerLoop.cpp	/^void Fuzzer::PrintOneNewPC(uintptr_t PC) {$/;"	f	class:fuzzer::Fuzzer
PrintPC	FuzzerUtil.cpp	/^void PrintPC(const char *SymbolizedFMT, const char *FallbackFMT, uintptr_t PC) {$/;"	f	namespace:fuzzer
PrintRecommendedDictionary	FuzzerMutate.cpp	/^void MutationDispatcher::PrintRecommendedDictionary() {$/;"	f	class:fuzzer::MutationDispatcher
PrintStats	FuzzerCorpus.h	/^  void PrintStats() {$/;"	f	class:fuzzer::InputCorpus
PrintStats	FuzzerLoop.cpp	/^void Fuzzer::PrintStats(const char *Where, const char *End, size_t Units) {$/;"	f	class:fuzzer::Fuzzer
PrintStatusForNewUnit	FuzzerLoop.cpp	/^void Fuzzer::PrintStatusForNewUnit(const Unit &U) {$/;"	f	class:fuzzer::Fuzzer
Printf	FuzzerIO.cpp	/^void Printf(const char *Fmt, ...) {$/;"	f	namespace:fuzzer
ProcessStartTime	FuzzerInternal.h	/^  system_clock::time_point ProcessStartTime = system_clock::now();$/;"	m	class:fuzzer::Fuzzer
ProgName	FuzzerDriver.cpp	/^static std::string *ProgName;$/;"	m	namespace:fuzzer	file:
Ptr	test/TraceMallocTest.cpp	/^int *Ptr;$/;"	v
PulseThread	FuzzerDriver.cpp	/^static void PulseThread() {$/;"	f	namespace:fuzzer
R	FuzzerRandom.h	/^  std::mt19937 R;$/;"	m	class:fuzzer::Random
Rand	FuzzerMutate.h	/^  Random &Rand;$/;"	m	class:fuzzer::MutationDispatcher
Rand	FuzzerRandom.h	/^  size_t Rand() { return R(); }$/;"	f	class:fuzzer::Random
RandBool	FuzzerRandom.h	/^  size_t RandBool() { return Rand() % 2; }$/;"	f	class:fuzzer::Random
RandCh	FuzzerMutate.cpp	/^static char RandCh(Random &Rand) {$/;"	f	namespace:fuzzer
Random	FuzzerRandom.h	/^  Random(unsigned int seed) : R(seed) {}$/;"	f	class:fuzzer::Random
Random	FuzzerRandom.h	/^class Random {$/;"	c	namespace:fuzzer
ReadDirToVectorOfUnits	FuzzerIO.cpp	/^void ReadDirToVectorOfUnits(const char *Path, std::vector<Unit> *V,$/;"	f	namespace:fuzzer
RecordMaxCoverage	FuzzerLoop.cpp	/^bool Fuzzer::RecordMaxCoverage(Fuzzer::Coverage *C) {$/;"	f	class:fuzzer::Fuzzer
RecordSuccessfulMutationSequence	FuzzerMutate.cpp	/^void MutationDispatcher::RecordSuccessfulMutationSequence() {$/;"	f	class:fuzzer::MutationDispatcher
RecordingMemcmp	FuzzerTraceState.cpp	/^static bool RecordingMemcmp = false;$/;"	m	namespace:fuzzer	file:
RecordingMemmem	FuzzerTraceState.cpp	/^static bool RecordingMemmem = false;$/;"	m	namespace:fuzzer	file:
ReloadIntervalSec	FuzzerOptions.h	/^  int ReloadIntervalSec = 1;$/;"	m	struct:fuzzer::FuzzingOptions
ReportNewCoverage	FuzzerLoop.cpp	/^void Fuzzer::ReportNewCoverage(InputInfo *II, const Unit &U) {$/;"	f	class:fuzzer::Fuzzer
ReportSlowUnits	FuzzerOptions.h	/^  int ReportSlowUnits = 10;$/;"	m	struct:fuzzer::FuzzingOptions
RereadOutputCorpus	FuzzerLoop.cpp	/^void Fuzzer::RereadOutputCorpus(size_t MaxSize) {$/;"	f	class:fuzzer::Fuzzer
Reset	FuzzerInternal.h	/^    void Reset() {$/;"	f	struct:fuzzer::Fuzzer::Coverage
Reset	FuzzerValueBitMap.h	/^  void Reset() { memset(Map, 0, sizeof(Map)); }$/;"	f	struct:fuzzer::ValueBitMap
ResetCounters	FuzzerLoop.cpp	/^void Fuzzer::ResetCounters() {$/;"	f	class:fuzzer::Fuzzer
ResetCoverage	FuzzerLoop.cpp	/^void Fuzzer::ResetCoverage() {$/;"	f	class:fuzzer::Fuzzer
ResetEdgeCoverage	FuzzerLoop.cpp	/^void Fuzzer::ResetEdgeCoverage() {$/;"	f	class:fuzzer::Fuzzer
ResetFeatureSet	FuzzerCorpus.h	/^  void ResetFeatureSet() {$/;"	f	class:fuzzer::InputCorpus
ResetGuards	FuzzerTracePC.cpp	/^void TracePC::ResetGuards() {$/;"	f	class:fuzzer::TracePC
ResetMaps	FuzzerTracePC.h	/^  void ResetMaps() {$/;"	f	class:fuzzer::TracePC
ResetTotalPCCoverage	FuzzerTracePC.h	/^  void ResetTotalPCCoverage() { TotalPCCoverage = 0; }$/;"	f	class:fuzzer::TracePC
RssLimitCallback	FuzzerLoop.cpp	/^void Fuzzer::RssLimitCallback() {$/;"	f	class:fuzzer::Fuzzer
RssLimitMb	FuzzerOptions.h	/^  int RssLimitMb = 0;$/;"	m	struct:fuzzer::FuzzingOptions
RssThread	FuzzerDriver.cpp	/^static void RssThread(Fuzzer *F, size_t RssLimitMb) {$/;"	f	namespace:fuzzer
RunInMultipleProcesses	FuzzerDriver.cpp	/^static int RunInMultipleProcesses(const std::vector<std::string> &Args,$/;"	f	namespace:fuzzer
RunOne	FuzzerInternal.h	/^  size_t RunOne(const Unit &U) { return RunOne(U.data(), U.size()); }$/;"	f	class:fuzzer::Fuzzer
RunOne	FuzzerLoop.cpp	/^size_t Fuzzer::RunOne(const uint8_t *Data, size_t Size) {$/;"	f	class:fuzzer::Fuzzer
RunOneTest	FuzzerDriver.cpp	/^int RunOneTest(Fuzzer *F, const char *InputFilePath, size_t MaxLen) {$/;"	f	namespace:fuzzer
SHA1_K0	FuzzerSHA1.cpp	77;"	d	file:
SHA1_K20	FuzzerSHA1.cpp	78;"	d	file:
SHA1_K40	FuzzerSHA1.cpp	79;"	d	file:
SHA1_K60	FuzzerSHA1.cpp	80;"	d	file:
SHA_BIG_ENDIAN	FuzzerSHA1.cpp	31;"	d	file:
SaveArtifacts	FuzzerOptions.h	/^  bool SaveArtifacts = true;$/;"	m	struct:fuzzer::FuzzingOptions
ScopedDoingMyOwnMemmem	FuzzerDefs.h	/^struct ScopedDoingMyOwnMemmem {$/;"	s	namespace:fuzzer
ScopedDoingMyOwnMemmem	FuzzerTraceState.cpp	/^ScopedDoingMyOwnMemmem::ScopedDoingMyOwnMemmem() { DoingMyOwnMemmem = true; }$/;"	f	class:fuzzer::ScopedDoingMyOwnMemmem
SeedLargeBuffer	test/BufferOverflowOnInput.cpp	/^static volatile bool SeedLargeBuffer;$/;"	v	file:
Separator	test/CustomCrossOverTest.cpp	/^static const char *Separator = "-_^_-";$/;"	v	file:
Set	FuzzerDictionary.h	/^  void Set(const uint8_t *B, uint8_t S) {$/;"	f	class:fuzzer::FixedWord
SetCorpus	FuzzerMutate.h	/^  void SetCorpus(const InputCorpus *Corpus) { this->Corpus = Corpus; }$/;"	f	class:fuzzer::MutationDispatcher
SetDeathCallback	FuzzerLoop.cpp	/^void Fuzzer::SetDeathCallback() {$/;"	f	class:fuzzer::Fuzzer
SetMaxInputLen	FuzzerLoop.cpp	/^void Fuzzer::SetMaxInputLen(size_t MaxInputLen) {$/;"	f	class:fuzzer::Fuzzer
SetMaxMutationLen	FuzzerLoop.cpp	/^void Fuzzer::SetMaxMutationLen(size_t MaxMutationLen) {$/;"	f	class:fuzzer::Fuzzer
SetSigAbrtHandler	FuzzerUtil.cpp	/^void SetSigAbrtHandler() { SetSigaction(SIGABRT, CrashHandler); }$/;"	f	namespace:fuzzer
SetSigBusHandler	FuzzerUtil.cpp	/^void SetSigBusHandler() { SetSigaction(SIGBUS, CrashHandler); }$/;"	f	namespace:fuzzer
SetSigFpeHandler	FuzzerUtil.cpp	/^void SetSigFpeHandler() { SetSigaction(SIGFPE, CrashHandler); }$/;"	f	namespace:fuzzer
SetSigIllHandler	FuzzerUtil.cpp	/^void SetSigIllHandler() { SetSigaction(SIGILL, CrashHandler); }$/;"	f	namespace:fuzzer
SetSigIntHandler	FuzzerUtil.cpp	/^void SetSigIntHandler() { SetSigaction(SIGINT, InterruptHandler); }$/;"	f	namespace:fuzzer
SetSigSegvHandler	FuzzerUtil.cpp	/^void SetSigSegvHandler() { SetSigaction(SIGSEGV, CrashHandler); }$/;"	f	namespace:fuzzer
SetSigTermHandler	FuzzerUtil.cpp	/^void SetSigTermHandler() { SetSigaction(SIGTERM, InterruptHandler); }$/;"	f	namespace:fuzzer
SetSigaction	FuzzerUtil.cpp	/^static void SetSigaction(int signum,$/;"	f	namespace:fuzzer
SetSigaction	afl/afl_driver.cpp	/^static void SetSigaction(int signum,$/;"	f	file:
SetTimer	FuzzerUtil.cpp	/^void SetTimer(int Seconds) {$/;"	f	namespace:fuzzer
SetUseCounters	FuzzerTracePC.h	/^  void SetUseCounters(bool UC) { UseCounters = UC; }$/;"	f	class:fuzzer::TracePC
SetUseValueProfile	FuzzerTracePC.h	/^  void SetUseValueProfile(bool VP) { UseValueProfile = VP; }$/;"	f	class:fuzzer::TracePC
Sha1	FuzzerCorpus.h	/^  uint8_t Sha1[kSHA1NumBytes];  \/\/ Checksum.$/;"	m	struct:fuzzer::InputInfo
Sha1ToString	FuzzerUtil.cpp	/^std::string Sha1ToString(const uint8_t Sha1[kSHA1NumBytes]) {$/;"	f	namespace:fuzzer
ShortSwitch	test/SwitchTest.cpp	/^bool ShortSwitch(const uint8_t *Data, size_t Size) {$/;"	f
Shrink	FuzzerOptions.h	/^  bool Shrink = false;$/;"	m	struct:fuzzer::FuzzingOptions
ShuffleAndMinimize	FuzzerLoop.cpp	/^void Fuzzer::ShuffleAndMinimize(UnitVector *InitialCorpus) {$/;"	f	class:fuzzer::Fuzzer
ShuffleAtStartUp	FuzzerOptions.h	/^  bool ShuffleAtStartUp = true;$/;"	m	struct:fuzzer::FuzzingOptions
ShuffleCorpus	FuzzerLoop.cpp	/^void Fuzzer::ShuffleCorpus(UnitVector *V) {$/;"	f	class:fuzzer::Fuzzer
SignalMutex	FuzzerUtilDarwin.cpp	/^static std::mutex SignalMutex;$/;"	m	namespace:fuzzer	file:
Sink	test/CustomMutatorTest.cpp	/^static volatile int Sink;$/;"	v	file:
Sink	test/DivTest.cpp	/^static volatile int Sink;$/;"	v	file:
Sink	test/LeakTest.cpp	/^static volatile void *Sink;$/;"	v	file:
Sink	test/LeakTimeoutTest.cpp	/^static volatile int *Sink;$/;"	v	file:
Sink	test/LoadTest.cpp	/^static volatile int Sink;$/;"	v	file:
Sink	test/NullDerefTest.cpp	/^static volatile int Sink;$/;"	v	file:
Sink	test/ShrinkControlFlowTest.cpp	/^static volatile int Sink;$/;"	v	file:
Sink	test/ShrinkValueProfileTest.cpp	/^static volatile uint32_t Sink;$/;"	v	file:
Sink	test/SignedIntOverflowTest.cpp	/^static volatile int Sink;$/;"	v	file:
Sink	test/SimpleTest.cpp	/^static volatile int Sink;$/;"	v	file:
Sink	test/StrncmpOOBTest.cpp	/^static volatile int Sink;$/;"	v	file:
Sink	test/SwitchTest.cpp	/^static volatile int Sink;$/;"	v	file:
Sink	test/ThreadedLeakTest.cpp	/^static volatile int *Sink;$/;"	v	file:
Sink	test/TimeoutTest.cpp	/^static volatile int Sink;$/;"	v	file:
SinkPtr	test/OneHugeAllocTest.cpp	/^static volatile char *SinkPtr;$/;"	v	file:
SinkPtr	test/OutOfMemoryTest.cpp	/^static volatile char *SinkPtr;$/;"	v	file:
Size	FuzzerDictionary.h	/^  size_t Size = 0;$/;"	m	class:fuzzer::Dictionary
Size	FuzzerDictionary.h	/^  uint8_t Size = 0;$/;"	m	class:fuzzer::FixedWord
SizeInBytes	FuzzerCorpus.h	/^  size_t SizeInBytes() const {$/;"	f	class:fuzzer::InputCorpus
SleepSeconds	FuzzerUtil.cpp	/^void SleepSeconds(int Seconds) {$/;"	f	namespace:fuzzer
SmallestElementPerFeature	FuzzerCorpus.h	/^  uint32_t SmallestElementPerFeature[kFeatureSetSize];$/;"	m	class:fuzzer::InputCorpus
Start	FuzzerLoop.cpp	/^  void Start(int TraceLevel) {$/;"	f	struct:fuzzer::MallocFreeTracer
Start	FuzzerTracePC.h	/^    uint32_t *Start, *Stop;$/;"	m	struct:fuzzer::TracePC::Module
StartMutationSequence	FuzzerMutate.cpp	/^void MutationDispatcher::StartMutationSequence() {$/;"	f	class:fuzzer::MutationDispatcher
StartRssThread	FuzzerDriver.cpp	/^static void StartRssThread(Fuzzer *F, size_t RssLimitMb) {$/;"	f	namespace:fuzzer
StartTraceRecording	FuzzerTraceState.cpp	/^  void StartTraceRecording() {$/;"	f	class:fuzzer::TraceState
StartTraceRecording	FuzzerTraceState.cpp	/^void Fuzzer::StartTraceRecording() {$/;"	f	class:fuzzer::Fuzzer
StaticAlarmCallback	FuzzerLoop.cpp	/^void Fuzzer::StaticAlarmCallback() {$/;"	f	class:fuzzer::Fuzzer
StaticCrashSignalCallback	FuzzerLoop.cpp	/^void Fuzzer::StaticCrashSignalCallback() {$/;"	f	class:fuzzer::Fuzzer
StaticDeathCallback	FuzzerLoop.cpp	/^void Fuzzer::StaticDeathCallback() {$/;"	f	class:fuzzer::Fuzzer
StaticInterruptCallback	FuzzerLoop.cpp	/^void Fuzzer::StaticInterruptCallback() {$/;"	f	class:fuzzer::Fuzzer
Stop	FuzzerLoop.cpp	/^  bool Stop() {$/;"	f	struct:fuzzer::MallocFreeTracer
Stop	FuzzerTracePC.h	/^    uint32_t *Start, *Stop;$/;"	m	struct:fuzzer::TracePC::Module
StopTraceRecording	FuzzerTraceState.cpp	/^  void StopTraceRecording() {$/;"	f	class:fuzzer::TraceState
StopTraceRecording	FuzzerTraceState.cpp	/^void Fuzzer::StopTraceRecording() {$/;"	f	class:fuzzer::Fuzzer
StrFlag	FuzzerDriver.cpp	/^  const char **StrFlag;$/;"	m	struct:fuzzer::FlagDescription	file:
SuccessCount	FuzzerDictionary.h	/^  size_t SuccessCount = 0;$/;"	m	class:fuzzer::DictionaryEntry
Switch	test/Switch2Test.cpp	/^int Switch(int a) {$/;"	f
Switch	test/SwitchTest.cpp	/^bool Switch(const uint8_t *Data, size_t Size) {$/;"	f
TEST	test/FuzzerFnAdapterUnittest.cpp	/^TEST(Apply, Bool) {$/;"	f	namespace:fuzzer::impl
TEST	test/FuzzerFnAdapterUnittest.cpp	/^TEST(Apply, Int) {$/;"	f	namespace:fuzzer::impl
TEST	test/FuzzerFnAdapterUnittest.cpp	/^TEST(Unpack, Bool) {$/;"	f	namespace:fuzzer::impl
TEST	test/FuzzerFnAdapterUnittest.cpp	/^TEST(Unpack, BoolBool) {$/;"	f	namespace:fuzzer::impl
TEST	test/FuzzerFnAdapterUnittest.cpp	/^TEST(Unpack, BoolInt) {$/;"	f	namespace:fuzzer::impl
TEST	test/FuzzerFnAdapterUnittest.cpp	/^TEST(Unpack, String) {$/;"	f	namespace:fuzzer::impl
TEST	test/FuzzerFnAdapterUnittest.cpp	/^TEST(Unpack, Vector) {$/;"	f	namespace:fuzzer::impl
TEST	test/FuzzerUnittest.cpp	/^TEST(Corpus, Distribution) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(Fuzzer, CrossOver) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(Fuzzer, Hash) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerDictionary, ParseDictionaryFile) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerDictionary, ParseOneDictionaryEntry) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, AddWordFromDictionary1) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, AddWordFromDictionary2) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, AddWordFromDictionaryWithHint1) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, AddWordFromDictionaryWithHint2) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, ChangeASCIIInteger1) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, ChangeASCIIInteger2) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, ChangeBinaryInteger1) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, ChangeBinaryInteger2) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, ChangeBit1) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, ChangeBit2) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, ChangeByte1) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, ChangeByte2) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, CopyPart1) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, CopyPart2) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, EraseBytes1) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, EraseBytes2) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, InsertByte1) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, InsertByte2) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, InsertRepeatedBytes1) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, InsertRepeatedBytes2) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, ShuffleBytes1) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerMutate, ShuffleBytes2) {$/;"	f
TEST	test/FuzzerUnittest.cpp	/^TEST(FuzzerUtil, Base64) {$/;"	f
TORC4	FuzzerTracePC.h	/^  TableOfRecentCompares<uint32_t, kTORCSize> TORC4;$/;"	m	class:fuzzer::TracePC
TORC8	FuzzerTracePC.h	/^  TableOfRecentCompares<uint64_t, kTORCSize> TORC8;$/;"	m	class:fuzzer::TracePC
TORCInsert	FuzzerTracePC.h	/^  void TORCInsert(size_t Idx, uint16_t Arg1, uint16_t Arg2) {$/;"	f	class:fuzzer::TracePC
TORCInsert	FuzzerTracePC.h	/^  void TORCInsert(size_t Idx, uint32_t Arg1, uint32_t Arg2) {$/;"	f	class:fuzzer::TracePC
TORCInsert	FuzzerTracePC.h	/^  void TORCInsert(size_t Idx, uint64_t Arg1, uint64_t Arg2) {$/;"	f	class:fuzzer::TracePC
TORCInsert	FuzzerTracePC.h	/^  void TORCInsert(size_t Idx, uint8_t Arg1, uint8_t Arg2) {$/;"	f	class:fuzzer::TracePC
TPC	FuzzerTracePC.cpp	/^TracePC TPC;$/;"	m	namespace:fuzzer	file:
TS	FuzzerTraceState.cpp	/^static TraceState *TS;$/;"	m	namespace:fuzzer	file:
Table	FuzzerTracePC.h	/^  Pair Table[kSize];$/;"	m	struct:fuzzer::TableOfRecentCompares
TableOfRecentCompares	FuzzerTracePC.h	/^struct TableOfRecentCompares {$/;"	s	namespace:fuzzer
Target	test/CustomCrossOverTest.cpp	/^static const char *Target = "012-_^_-abc";$/;"	v	file:
TempAutoDictionary	FuzzerMutate.h	/^  Dictionary TempAutoDictionary;$/;"	m	class:fuzzer::MutationDispatcher
TestAddWordFromDictionary	test/FuzzerUnittest.cpp	/^void TestAddWordFromDictionary(Mutator M, int NumIter) {$/;"	f
TestAddWordFromDictionaryWithHint	test/FuzzerUnittest.cpp	/^void TestAddWordFromDictionaryWithHint(Mutator M, int NumIter) {$/;"	f
TestChangeASCIIInteger	test/FuzzerUnittest.cpp	/^void TestChangeASCIIInteger(Mutator M, int NumIter) {$/;"	f
TestChangeBinaryInteger	test/FuzzerUnittest.cpp	/^void TestChangeBinaryInteger(Mutator M, int NumIter) {$/;"	f
TestChangeBit	test/FuzzerUnittest.cpp	/^void TestChangeBit(Mutator M, int NumIter) {$/;"	f
TestChangeByte	test/FuzzerUnittest.cpp	/^void TestChangeByte(Mutator M, int NumIter) {$/;"	f
TestCopyPart	test/FuzzerUnittest.cpp	/^void TestCopyPart(Mutator M, int NumIter) {$/;"	f
TestEraseBytes	test/FuzzerUnittest.cpp	/^void TestEraseBytes(Mutator M, int NumIter) {$/;"	f
TestFn	test/SimpleFnAdapterTest.cpp	/^static void TestFn(std::vector<uint8_t> V1, std::vector<uint8_t> V2) {$/;"	f	file:
TestInsertByte	test/FuzzerUnittest.cpp	/^void TestInsertByte(Mutator M, int NumIter) {$/;"	f
TestInsertRepeatedBytes	test/FuzzerUnittest.cpp	/^void TestInsertRepeatedBytes(Mutator M, int NumIter) {$/;"	f
TestShuffleBytes	test/FuzzerUnittest.cpp	/^void TestShuffleBytes(Mutator M, int NumIter) {$/;"	f
TimeOfLongestUnitInSeconds	FuzzerInternal.h	/^  long TimeOfLongestUnitInSeconds = 0;$/;"	m	class:fuzzer::Fuzzer
TimedOut	FuzzerInternal.h	/^  bool TimedOut() {$/;"	f	class:fuzzer::Fuzzer
TimeoutExitCode	FuzzerOptions.h	/^  int TimeoutExitCode = 77;$/;"	m	struct:fuzzer::FuzzingOptions
Tmp	FuzzerCorpus.h	/^  size_t Tmp = 0; \/\/ Used by ValidateFeatureSet.$/;"	m	struct:fuzzer::InputInfo
ToASCII	FuzzerUtil.cpp	/^bool ToASCII(uint8_t *Data, size_t Size) {$/;"	f	namespace:fuzzer
TotalNumberOfRuns	FuzzerInternal.h	/^  size_t TotalNumberOfRuns = 0;$/;"	m	class:fuzzer::Fuzzer
TotalPCCoverage	FuzzerTracePC.h	/^  size_t TotalPCCoverage = 0;$/;"	m	class:fuzzer::TracePC
TraceBasedMutation	FuzzerTraceState.cpp	/^struct TraceBasedMutation {$/;"	s	namespace:fuzzer	file:
TraceLevel	FuzzerLoop.cpp	/^  int TraceLevel = 0;$/;"	m	struct:fuzzer::MallocFreeTracer	file:
TraceMalloc	FuzzerOptions.h	/^  int  TraceMalloc = 0;$/;"	m	struct:fuzzer::FuzzingOptions
TraceMemcmpCallback	FuzzerTraceState.cpp	/^void TraceState::TraceMemcmpCallback(size_t CmpSize, const uint8_t *Data1,$/;"	f	class:fuzzer::TraceState
TracePC	FuzzerTracePC.h	/^class TracePC {$/;"	c	namespace:fuzzer
TraceState	FuzzerTraceState.cpp	/^  TraceState(MutationDispatcher &MD, const FuzzingOptions &Options,$/;"	f	class:fuzzer::TraceState
TraceState	FuzzerTraceState.cpp	/^class TraceState {$/;"	c	namespace:fuzzer	file:
TraceSwitchCallback	FuzzerTraceState.cpp	/^void TraceState::TraceSwitchCallback(uintptr_t PC, size_t ValSizeInBits,$/;"	f	class:fuzzer::TraceState
TryDetectingAMemoryLeak	FuzzerLoop.cpp	/^void Fuzzer::TryDetectingAMemoryLeak(const uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::Fuzzer
TryToAddDesiredData	FuzzerTraceState.cpp	/^int TraceState::TryToAddDesiredData(const uint8_t *PresentData,$/;"	f	class:fuzzer::TraceState
TryToAddDesiredData	FuzzerTraceState.cpp	/^int TraceState::TryToAddDesiredData(uint64_t PresentData, uint64_t DesiredData,$/;"	f	class:fuzzer::TraceState
U	FuzzerCorpus.h	/^  Unit U;  \/\/ The actual input data.$/;"	m	struct:fuzzer::InputInfo
UIntFlag	FuzzerDriver.cpp	/^  unsigned int *UIntFlag;$/;"	m	struct:fuzzer::FlagDescription	file:
UNPACK_SINGLE_PRIMITIVE	FuzzerFnAdapter.h	57;"	d
UNPACK_SINGLE_PRIMITIVE	FuzzerFnAdapter.h	83;"	d
Uncovered1	test/DSO1.cpp	/^void Uncovered1() { }$/;"	f
Uncovered2	test/DSO2.cpp	/^void Uncovered2() {}$/;"	f
Unit	FuzzerDefs.h	/^typedef std::vector<uint8_t> Unit;$/;"	t	namespace:fuzzer
UnitStartTime	FuzzerInternal.h	/^  system_clock::time_point UnitStartTime, UnitStopTime;$/;"	m	class:fuzzer::Fuzzer
UnitStopTime	FuzzerInternal.h	/^  system_clock::time_point UnitStartTime, UnitStopTime;$/;"	m	class:fuzzer::Fuzzer
UnitTimeoutSec	FuzzerOptions.h	/^  int UnitTimeoutSec = 300;$/;"	m	struct:fuzzer::FuzzingOptions
UnitVector	FuzzerDefs.h	/^typedef std::vector<Unit> UnitVector;$/;"	t	namespace:fuzzer
Unpack	test/FuzzerFnAdapterUnittest.cpp	/^bool Unpack(std::tuple<Args...> *Tuple, std::initializer_list<uint8_t> data) {$/;"	f	namespace:fuzzer::impl
UnpackAndApply	test/FuzzerFnAdapterUnittest.cpp	/^bool UnpackAndApply(Fn F, std::initializer_list<uint8_t> Data) {$/;"	f	namespace:fuzzer::impl
UnpackImpl	FuzzerFnAdapter.h	/^UnpackImpl(const uint8_t *Data, size_t Size, TupleT *Tuple) {$/;"	f	namespace:fuzzer::impl
UnpackPrimitive	FuzzerFnAdapter.h	/^size_t UnpackPrimitive(const uint8_t *Data, size_t Size, T *Value) {$/;"	f	namespace:fuzzer::impl
UnpackSingle	FuzzerFnAdapter.h	/^size_t UnpackSingle<std::string>(const uint8_t *Data, size_t Size,$/;"	f	namespace:fuzzer::impl
UnpackSingle	FuzzerFnAdapter.h	/^size_t UnpackSingle<std::vector<uint8_t>>(const uint8_t *Data, size_t Size,$/;"	f	namespace:fuzzer::impl
UpdateCorpusDistribution	FuzzerCorpus.h	/^  void UpdateCorpusDistribution() {$/;"	f	class:fuzzer::InputCorpus
UpdateValueProfileMap	FuzzerTracePC.h	/^  bool UpdateValueProfileMap(ValueBitMap *MaxValueProfileMap) {$/;"	f	class:fuzzer::TracePC
UseCmp	FuzzerOptions.h	/^  bool UseCmp = false;$/;"	m	struct:fuzzer::FuzzingOptions
UseCount	FuzzerDictionary.h	/^  size_t UseCount = 0;$/;"	m	class:fuzzer::DictionaryEntry
UseCounters	FuzzerOptions.h	/^  bool UseCounters = false;$/;"	m	struct:fuzzer::FuzzingOptions
UseCounters	FuzzerTracePC.h	/^  bool UseCounters = false;$/;"	m	class:fuzzer::TracePC
UseIndirCalls	FuzzerOptions.h	/^  bool UseIndirCalls = true;$/;"	m	struct:fuzzer::FuzzingOptions
UseMemcmp	FuzzerOptions.h	/^  bool UseMemcmp = true;$/;"	m	struct:fuzzer::FuzzingOptions
UseMemmem	FuzzerOptions.h	/^  bool UseMemmem = true;$/;"	m	struct:fuzzer::FuzzingOptions
UseValueProfile	FuzzerOptions.h	/^  bool UseValueProfile = false;$/;"	m	struct:fuzzer::FuzzingOptions
UseValueProfile	FuzzerTracePC.h	/^  bool UseValueProfile = false;$/;"	m	class:fuzzer::TracePC
UserCallback	FuzzerDefs.h	/^typedef int (*UserCallback)(const uint8_t *Data, size_t Size);$/;"	t	namespace:fuzzer
UsingTracePcGuard	FuzzerTracePC.h	/^  bool UsingTracePcGuard() const {return NumModules; }$/;"	f	class:fuzzer::TracePC
VPMap	FuzzerInternal.h	/^    ValueBitMap VPMap;$/;"	m	struct:fuzzer::Fuzzer::Coverage
ValidateFeatureSet	FuzzerCorpus.h	/^  void ValidateFeatureSet() {$/;"	f	class:fuzzer::InputCorpus
ValueBitMap	FuzzerValueBitMap.h	/^struct ValueBitMap {$/;"	s	namespace:fuzzer
ValueProfileMap	FuzzerTracePC.h	/^  ValueBitMap ValueProfileMap;$/;"	m	class:fuzzer::TracePC
Verbosity	FuzzerOptions.h	/^  int Verbosity = 1;$/;"	m	struct:fuzzer::FuzzingOptions
W	FuzzerDictionary.h	/^  Word W;$/;"	m	class:fuzzer::DictionaryEntry
W	FuzzerTraceState.cpp	/^  Word W;$/;"	m	struct:fuzzer::TraceBasedMutation	file:
WantToHandleOneMoreMutation	FuzzerTraceState.cpp	/^  bool WantToHandleOneMoreMutation() {$/;"	f	class:fuzzer::TraceState	file:
WarnOnUnsuccessfullMerge	FuzzerLoop.cpp	/^static void WarnOnUnsuccessfullMerge(bool DoWarn) {$/;"	f	namespace:fuzzer
Weights	FuzzerCorpus.h	/^  std::vector<double> Weights;$/;"	m	class:fuzzer::InputCorpus
Word	FuzzerDictionary.h	/^typedef FixedWord<27> Word; \/\/ 28 bytes.$/;"	t	namespace:fuzzer
WorkerThread	FuzzerDriver.cpp	/^static void WorkerThread(const std::string &Cmd, std::atomic<int> *Counter,$/;"	f	namespace:fuzzer
WriteToFile	FuzzerIO.cpp	/^void WriteToFile(const Unit &U, const std::string &Path) {$/;"	f	namespace:fuzzer
WriteToOutputCorpus	FuzzerLoop.cpp	/^void Fuzzer::WriteToOutputCorpus(const Unit &U) {$/;"	f	class:fuzzer::Fuzzer
WriteUnitToFileWithPrefix	FuzzerLoop.cpp	/^void Fuzzer::WriteUnitToFileWithPrefix(const Unit &U, const char *Prefix) {$/;"	f	class:fuzzer::Fuzzer
Zero	test/SimpleDictionaryTest.cpp	/^static volatile int Zero = 0;$/;"	v	file:
_LIBCPP_HAS_NO_ASAN	test/FuzzerUnittest.cpp	6;"	d	file:
__afl_manual_init	test/AFLDriverTest.cpp	/^extern "C" void __afl_manual_init() {}$/;"	f
__afl_persistent_loop	test/AFLDriverTest.cpp	/^extern "C" int __afl_persistent_loop(unsigned int) {$/;"	f
__libfuzzer_is_present	FuzzerDriver.cpp	/^extern "C" __attribute__((used)) void __libfuzzer_is_present() {}$/;"	f
__sanitizer_cov_trace_cmp1	FuzzerTracePC.cpp	/^void __sanitizer_cov_trace_cmp1(uint8_t Arg1, uint8_t Arg2) {$/;"	f
__sanitizer_cov_trace_cmp2	FuzzerTracePC.cpp	/^void __sanitizer_cov_trace_cmp2(uint16_t Arg1, uint16_t Arg2) {$/;"	f
__sanitizer_cov_trace_cmp4	FuzzerTracePC.cpp	/^void __sanitizer_cov_trace_cmp4(uint32_t Arg1, uint32_t Arg2) {$/;"	f
__sanitizer_cov_trace_cmp8	FuzzerTracePC.cpp	/^void __sanitizer_cov_trace_cmp8(uint64_t Arg1, uint64_t Arg2) {$/;"	f
__sanitizer_cov_trace_div4	FuzzerTracePC.cpp	/^void __sanitizer_cov_trace_div4(uint32_t Val) {$/;"	f
__sanitizer_cov_trace_div8	FuzzerTracePC.cpp	/^void __sanitizer_cov_trace_div8(uint64_t Val) {$/;"	f
__sanitizer_cov_trace_gep	FuzzerTracePC.cpp	/^void __sanitizer_cov_trace_gep(uintptr_t Idx) {$/;"	f
__sanitizer_cov_trace_pc_guard	FuzzerTracePC.cpp	/^void __sanitizer_cov_trace_pc_guard(uint32_t *Guard) {$/;"	f
__sanitizer_cov_trace_pc_guard_init	FuzzerTracePC.cpp	/^void __sanitizer_cov_trace_pc_guard_init(uint32_t *Start, uint32_t *Stop) {$/;"	f
__sanitizer_cov_trace_pc_indir	FuzzerTracePC.cpp	/^void __sanitizer_cov_trace_pc_indir(uintptr_t Callee) {$/;"	f
__sanitizer_cov_trace_switch	FuzzerTracePC.cpp	/^void __sanitizer_cov_trace_switch(uint64_t Val, uint64_t *Cases) {$/;"	f
__sanitizer_weak_hook_memcmp	FuzzerTraceState.cpp	/^void __sanitizer_weak_hook_memcmp(void *caller_pc, const void *s1,$/;"	f
__sanitizer_weak_hook_memmem	FuzzerTraceState.cpp	/^void __sanitizer_weak_hook_memmem(void *called_pc, const void *s1, size_t len1,$/;"	f
__sanitizer_weak_hook_strcasecmp	FuzzerTraceState.cpp	/^void __sanitizer_weak_hook_strcasecmp(void *called_pc, const char *s1,$/;"	f
__sanitizer_weak_hook_strcasestr	FuzzerTraceState.cpp	/^void __sanitizer_weak_hook_strcasestr(void *called_pc, const char *s1,$/;"	f
__sanitizer_weak_hook_strcmp	FuzzerTraceState.cpp	/^void __sanitizer_weak_hook_strcmp(void *caller_pc, const char *s1,$/;"	f
__sanitizer_weak_hook_strncasecmp	FuzzerTraceState.cpp	/^void __sanitizer_weak_hook_strncasecmp(void *called_pc, const char *s1,$/;"	f
__sanitizer_weak_hook_strncmp	FuzzerTraceState.cpp	/^void __sanitizer_weak_hook_strncmp(void *caller_pc, const char *s1,$/;"	f
__sanitizer_weak_hook_strstr	FuzzerTraceState.cpp	/^void __sanitizer_weak_hook_strstr(void *called_pc, const char *s1,$/;"	f
argv0	test/InitializeTest.cpp	/^static char *argv0;$/;"	v	file:
array	test/LoadTest.cpp	/^int array[kArraySize];$/;"	v
begin	FuzzerDictionary.h	/^  const DictionaryEntry *begin() const { return &DE[0]; }$/;"	f	class:fuzzer::Dictionary
buffer	FuzzerSHA1.cpp	/^	uint32_t buffer[BLOCK_LENGTH\/4];$/;"	m	struct:__anon2::sha1nfo	file:
bufferOffset	FuzzerSHA1.cpp	/^	uint8_t bufferOffset;$/;"	m	struct:__anon2::sha1nfo	file:
byteCount	FuzzerSHA1.cpp	/^	uint32_t byteCount;$/;"	m	struct:__anon2::sha1nfo	file:
clear	FuzzerDictionary.h	/^  void clear() { Size = 0; }$/;"	f	class:fuzzer::Dictionary
crash_handler	afl/afl_driver.cpp	/^static void crash_handler(int, siginfo_t *, void *) {$/;"	f	file:
data	FuzzerDictionary.h	/^  const uint8_t *data() const { return Data; }$/;"	f	class:fuzzer::FixedWord
empty	FuzzerCorpus.h	/^  bool empty() const { return Inputs.empty(); }$/;"	f	class:fuzzer::InputCorpus
empty	FuzzerDictionary.h	/^  bool empty() const { return Size == 0; }$/;"	f	class:fuzzer::Dictionary
end	FuzzerDictionary.h	/^  const DictionaryEntry *end() const { return begin() + Size; }$/;"	f	class:fuzzer::Dictionary
environ	FuzzerUtilDarwin.cpp	/^extern "C" char **environ;$/;"	v
execPerSec	FuzzerInternal.h	/^  size_t execPerSec() {$/;"	f	class:fuzzer::Fuzzer
extra_stats_file	afl/afl_driver.cpp	/^static FILE *extra_stats_file = NULL;$/;"	v	file:
f00	test/CallerCalleeTest.cpp	/^void f00() {}$/;"	f
f01	test/CallerCalleeTest.cpp	/^void f01() { t[(unsigned)'b'] = f12;}$/;"	f
f12	test/CallerCalleeTest.cpp	/^void f12() { t[(unsigned)'c'] = f23;}$/;"	f
f23	test/CallerCalleeTest.cpp	/^void f23() { t[(unsigned)'d'] = f34;}$/;"	f
f34	test/CallerCalleeTest.cpp	/^void f34() {$/;"	f
fnBool	test/FuzzerFnAdapterUnittest.cpp	/^static void fnBool(bool b) { EXPECT_TRUE(b); }$/;"	f	namespace:fuzzer::impl
fnInt	test/FuzzerFnAdapterUnittest.cpp	/^static void fnInt(int i) { EXPECT_EQ(42, i); }$/;"	f	namespace:fuzzer::impl
fuzzer	FuzzerCorpus.h	/^namespace fuzzer {$/;"	n
fuzzer	FuzzerCrossOver.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerDefs.h	/^namespace fuzzer {$/;"	n
fuzzer	FuzzerDictionary.h	/^namespace fuzzer {$/;"	n
fuzzer	FuzzerDriver.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerExtFunctions.h	/^namespace fuzzer {$/;"	n
fuzzer	FuzzerExtFunctionsDlsym.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerExtFunctionsWeak.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerFnAdapter.h	/^namespace fuzzer {$/;"	n
fuzzer	FuzzerIO.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerInternal.h	/^namespace fuzzer {$/;"	n
fuzzer	FuzzerLoop.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerMutate.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerMutate.h	/^namespace fuzzer {$/;"	n
fuzzer	FuzzerOptions.h	/^namespace fuzzer {$/;"	n
fuzzer	FuzzerRandom.h	/^namespace fuzzer {$/;"	n
fuzzer	FuzzerTracePC.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerTracePC.h	/^namespace fuzzer {$/;"	n
fuzzer	FuzzerTraceState.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerUtil.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerUtilDarwin.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerUtilLinux.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerValueBitMap.h	/^namespace fuzzer {$/;"	n
fuzzer	test/FuzzerFnAdapterUnittest.cpp	/^namespace fuzzer {$/;"	n	file:
getTotalNumberOfRuns	FuzzerInternal.h	/^  size_t getTotalNumberOfRuns() { return TotalNumberOfRuns; }$/;"	f	class:fuzzer::Fuzzer
impl	FuzzerFnAdapter.h	/^namespace impl {$/;"	n	namespace:fuzzer
impl	test/FuzzerFnAdapterUnittest.cpp	/^namespace impl {$/;"	n	namespace:fuzzer	file:
innerHash	FuzzerSHA1.cpp	/^	uint8_t innerHash[HASH_LENGTH];$/;"	m	struct:__anon2::sha1nfo	file:
kAllocatedPointersSize	test/AccumulateAllocationsTest.cpp	/^const int kAllocatedPointersSize = 10000;$/;"	v
kArraySize	test/LoadTest.cpp	/^const int kArraySize = 1234567;$/;"	v
kBitsInWord	FuzzerValueBitMap.h	/^  static const size_t kBitsInWord = (sizeof(uintptr_t) * 8);$/;"	m	struct:fuzzer::ValueBitMap
kCmpDictionaryEntriesDequeSize	FuzzerMutate.h	/^  static const size_t kCmpDictionaryEntriesDequeSize = 16;$/;"	m	class:fuzzer::MutationDispatcher
kExtraStatsFormatString	afl/afl_driver.cpp	/^static const char *kExtraStatsFormatString = "peak_rss_mb            : %u\\n"$/;"	v	file:
kFeatureSetSize	FuzzerCorpus.h	/^  static const size_t kFeatureSetSize = 1 << 16;$/;"	m	class:fuzzer::InputCorpus
kFeatureSetSize	FuzzerTracePC.h	/^  static const size_t kFeatureSetSize = ValueBitMap::kNumberOfItems;$/;"	m	class:fuzzer::TracePC
kMapSizeInBits	FuzzerValueBitMap.h	/^  static const size_t kMapSizeInBits = 65371;        \/\/ Prime.$/;"	m	struct:fuzzer::ValueBitMap
kMapSizeInBitsAligned	FuzzerValueBitMap.h	/^  static const size_t kMapSizeInBitsAligned = 65536; \/\/ 2^16$/;"	m	struct:fuzzer::ValueBitMap
kMapSizeInWords	FuzzerValueBitMap.h	/^  static const size_t kMapSizeInWords = kMapSizeInBitsAligned \/ kBitsInWord;$/;"	m	struct:fuzzer::ValueBitMap
kMaxAflInputSize	afl/afl_driver.cpp	/^static const size_t kMaxAflInputSize = 1 << 20;$/;"	v	file:
kMaxDictSize	FuzzerDictionary.h	/^  static const size_t kMaxDictSize = 1 << 14;$/;"	m	class:fuzzer::Dictionary
kMaxDictSize	FuzzerMutate.cpp	/^const size_t Dictionary::kMaxDictSize;$/;"	m	class:fuzzer::Dictionary	file:
kMaxMutations	FuzzerTraceState.cpp	/^  static const size_t kMaxMutations = 1 << 16;$/;"	m	class:fuzzer::TraceState	file:
kMaxNewPCIDs	FuzzerTracePC.h	/^  static const size_t kMaxNewPCIDs = 1024;$/;"	m	class:fuzzer::TracePC
kMaxUnitSizeToPrint	FuzzerLoop.cpp	/^static const size_t kMaxUnitSizeToPrint = 256;$/;"	m	namespace:fuzzer	file:
kNumCounters	FuzzerTracePC.h	/^  static const size_t kNumCounters = 1 << 14;$/;"	m	class:fuzzer::TracePC
kNumExtraStats	afl/afl_driver.cpp	/^static const int kNumExtraStats = 2;$/;"	v	file:
kNumFlags	FuzzerDriver.cpp	/^static const size_t kNumFlags =$/;"	m	namespace:fuzzer	file:
kNumPCs	FuzzerTracePC.h	/^  static const size_t kNumPCs = 1 << 24;$/;"	m	class:fuzzer::TracePC
kNumberOfItems	FuzzerValueBitMap.h	/^  static const size_t kNumberOfItems = kMapSizeInBits;$/;"	m	struct:fuzzer::ValueBitMap
kSHA1NumBytes	FuzzerDefs.h	/^static const int kSHA1NumBytes = 20;$/;"	m	namespace:fuzzer
kSize	FuzzerTracePC.h	/^  static const size_t kSize = kSizeT;$/;"	m	struct:fuzzer::TableOfRecentCompares
kTORCSize	FuzzerTracePC.h	/^  static const size_t kTORCSize = 1 << 5;$/;"	m	class:fuzzer::TracePC
keyBuffer	FuzzerSHA1.cpp	/^	uint8_t keyBuffer[BLOCK_LENGTH];$/;"	m	struct:__anon2::sha1nfo	file:
main	FuzzerMain.cpp	/^int main(int argc, char **argv) {$/;"	f
main	afl/afl_driver.cpp	/^int main(int argc, char **argv) {$/;"	f
maybe_duplicate_stderr	afl/afl_driver.cpp	/^static void maybe_duplicate_stderr() {$/;"	f	file:
maybe_initialize_extra_stats	afl/afl_driver.cpp	/^static void maybe_initialize_extra_stats() {$/;"	f	file:
nil	test/DSOTestMain.cpp	/^static volatile int *nil = 0;$/;"	v	file:
operator ()	FuzzerRandom.h	/^  intptr_t operator()(intptr_t From, intptr_t To) {$/;"	f	class:fuzzer::Random
operator ()	FuzzerRandom.h	/^  size_t operator()(size_t n) { return n ? Rand() % n : 0; }$/;"	f	class:fuzzer::Random
operator <	FuzzerDictionary.h	/^  bool operator<(const FixedWord<kMaxSize> &w) const {$/;"	f	class:fuzzer::FixedWord
operator ==	FuzzerDictionary.h	/^  bool operator==(const FixedWord<kMaxSize> &w) const {$/;"	f	class:fuzzer::FixedWord
operator []	FuzzerCorpus.h	/^  const Unit &operator[] (size_t Idx) const { return Inputs[Idx]->U; }$/;"	f	class:fuzzer::InputCorpus
operator []	FuzzerDictionary.h	/^  DictionaryEntry & operator[] (size_t Idx) {$/;"	f	class:fuzzer::Dictionary
previous_peak_rss	afl/afl_driver.cpp	/^static uint32_t previous_peak_rss = 0;$/;"	v	file:
push_back	FuzzerDictionary.h	/^  void push_back(DictionaryEntry DE) {$/;"	f	class:fuzzer::Dictionary
secondsSinceProcessStartUp	FuzzerInternal.h	/^  size_t secondsSinceProcessStartUp() {$/;"	f	class:fuzzer::Fuzzer
sha1_addUncounted	FuzzerSHA1.cpp	/^void sha1_addUncounted(sha1nfo *s, uint8_t data) {$/;"	f	namespace:__anon2
sha1_hashBlock	FuzzerSHA1.cpp	/^void sha1_hashBlock(sha1nfo *s) {$/;"	f	namespace:__anon2
sha1_init	FuzzerSHA1.cpp	/^void sha1_init(sha1nfo *s) {$/;"	f	namespace:__anon2
sha1_pad	FuzzerSHA1.cpp	/^void sha1_pad(sha1nfo *s) {$/;"	f	namespace:__anon2
sha1_result	FuzzerSHA1.cpp	/^uint8_t* sha1_result(sha1nfo *s) {$/;"	f	namespace:__anon2
sha1_rol32	FuzzerSHA1.cpp	/^uint32_t sha1_rol32(uint32_t number, uint8_t bits) {$/;"	f	namespace:__anon2
sha1_write	FuzzerSHA1.cpp	/^void sha1_write(sha1nfo *s, const char *data, size_t len) {$/;"	f	namespace:__anon2
sha1_writebyte	FuzzerSHA1.cpp	/^void sha1_writebyte(sha1nfo *s, uint8_t data) {$/;"	f	namespace:__anon2
sha1nfo	FuzzerSHA1.cpp	/^typedef struct sha1nfo {$/;"	s	namespace:__anon2	file:
sha1nfo	FuzzerSHA1.cpp	/^} sha1nfo;$/;"	t	namespace:__anon2	typeref:struct:__anon2::sha1nfo	file:
simple_hash	test/SimpleHashTest.cpp	/^static uint32_t simple_hash(const uint8_t *Data, size_t Size) {$/;"	f	file:
sink	test/CustomCrossOverTest.cpp	/^static volatile int sink;$/;"	v	file:
sink	test/StrncmpTest.cpp	/^static volatile int sink;$/;"	v	file:
size	FuzzerCorpus.h	/^  size_t size() const { return Inputs.size(); }$/;"	f	class:fuzzer::InputCorpus
size	FuzzerDictionary.h	/^  size_t size() const { return Size; }$/;"	f	class:fuzzer::Dictionary
size	FuzzerDictionary.h	/^  uint8_t size() const { return Size; }$/;"	f	class:fuzzer::FixedWord
slowest_unit_time_secs	afl/afl_driver.cpp	/^static time_t slowest_unit_time_secs = 0;$/;"	v	file:
state	FuzzerSHA1.cpp	/^	uint32_t state[HASH_LENGTH\/4];$/;"	m	struct:__anon2::sha1nfo	file:
suppress_warning1	afl/afl_driver.cpp	/^static volatile char suppress_warning1 = AFL_DEFER_FORKSVR[0];$/;"	v	file:
suppress_warning2	afl/afl_driver.cpp	/^static volatile char suppress_warning2 = AFL_PERSISTENT[0];$/;"	v	file:
t	test/CallerCalleeTest.cpp	/^static F t[256];$/;"	v	file:
t0	test/CallerCalleeTest.cpp	/^static F t0[256] = {$/;"	v	file:
write_extra_stats	afl/afl_driver.cpp	/^static void write_extra_stats() {$/;"	f	file:
~Fuzzer	FuzzerLoop.cpp	/^Fuzzer::~Fuzzer() { }$/;"	f	class:fuzzer::Fuzzer
~InputCorpus	FuzzerCorpus.h	/^  ~InputCorpus() {$/;"	f	class:fuzzer::InputCorpus
~MutationDispatcher	FuzzerMutate.h	/^  ~MutationDispatcher() {}$/;"	f	class:fuzzer::MutationDispatcher
~ScopedDoingMyOwnMemmem	FuzzerTraceState.cpp	/^ScopedDoingMyOwnMemmem::~ScopedDoingMyOwnMemmem() { DoingMyOwnMemmem = false; }$/;"	f	class:fuzzer::ScopedDoingMyOwnMemmem
